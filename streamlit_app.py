import streamlit as st
import os
import sympy
from langchain_openai import ChatOpenAI
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain.tools import Tool
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
from data.learning_topics import LEARNING_TOPICS

load_dotenv()

st.set_page_config(page_title="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AI", page_icon="üßÆ", layout="wide")

# ============= –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =============

def calculator(expression: str) -> str:
    try:
        import math
        result = eval(expression.strip(), {
            "__builtins__": {},
            "pi": math.pi,
            "e": math.e,
            "sqrt": math.sqrt,
            "pow": pow,
            "abs": abs
        })
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def symbolic_math(expression: str) -> str:
    try:
        x, y, z = sympy.symbols('x y z')
        local_dict = {
            'x': x, 'y': y, 'z': z, 'integrate': sympy.integrate, 'diff': sympy.diff,
            'solve': sympy.solve, 'limit': sympy.limit, 'sin': sympy.sin, 'cos': sympy.cos,
            'sqrt': sympy.sqrt, 'pi': sympy.pi, 'oo': sympy.oo
        }
        result = eval(expression.strip(), {"__builtins__": {}}, local_dict)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def equation_solver(equation: str) -> str:
    try:
        x = sympy.symbols('x')
        equations = [eq.strip() for eq in equation.split(',')]
        sympy_eqs = []
        for eq in equations:
            if '=' in eq:
                left, right = eq.split('=')
                sympy_eqs.append(sympy.sympify(left) - sympy.sympify(right))
            else:
                sympy_eqs.append(sympy.sympify(eq))
        solutions = sympy.solve(sympy_eqs[0], x)
        return f"–†–µ—à–µ–Ω–∏–µ: {solutions}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# ============= –ü–†–û–ú–ü–¢ –¢–¨–Æ–¢–û–†–ê –î–õ–Ø STUDY MODE =============

TUTOR_PROMPT = """# –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –¢–¨–Æ–¢–û–†–ê

## –†–û–õ–¨ –ò –ú–ò–°–°–ò–Ø
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç—å—é—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –ª—é–±—ã—Ö —à–∫–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å—Å—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏ –¥–µ–ª–∞–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º.

---

## –°–¢–†–£–ö–¢–£–†–ê –û–ë–£–ß–ï–ù–ò–Ø

### –≠–¢–ê–ü 1: –°–û–ù–ê–°–¢–†–û–ô–ö–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú

#### 1.1 –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —É—á–µ–Ω–∏–∫–∞ —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –£–∑–Ω–∞–π:
- **–í–æ–∑—Ä–∞—Å—Ç** (–∏–ª–∏ –∫–ª–∞—Å—Å) (–µ—Å–ª–∏ —É—á–µ–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –∫–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ —Ç–µ–º–µ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø—Ä–∏–Ω–µ—Å, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–¥—Å—Ç—Ä–æ–π —Å–≤–æ–π —è–∑—ã–∫ –∏ –ø—Ä–∏–º–µ—Ä—ã)
- **–¢–µ–º—É**, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ/–ø—Ä–∏–º–µ—Ä)
- **–¶–µ–ª—å** ‚Äî –ø–æ–Ω—è—Ç—å —Ç–µ–º—É, —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª—é–±–æ–π —Ç–µ–º–æ–π üìö –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ –∏ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å?"

#### 1.2 –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π
–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, –∫–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:
- –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (3 –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–æ–ø—Ä–æ—Å–∞)
- –ü–æ—Ç–æ–º —Ä–∞–∑–±–µ—Ä–µ–º —Ç–µ–º—É –ø–æ—à–∞–≥–æ–≤–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
- –í –∫–æ–Ω—Ü–µ ‚Äî –∑–∞–¥–∞—á–∫–∞ –ø–æ—Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
- –ò –ø–æ–ª—É—á–∏—à—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –≤—Å–µ–≥–æ, —á—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏

–°–ø—Ä–æ—Å–∏: "–¢–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–π –ø–ª–∞–Ω –∏–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"

#### 1.3 –ü–µ—Ä–≤–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
–ü—Ä–æ–≤–µ–¥–∏ **–º–∏–Ω–∏-–∫–≤–∏–∑ –∏–∑ 3 –≤–æ–ø—Ä–æ—Å–æ–≤**, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ:
- –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤—ã–π ‚Üí —Å—Ä–µ–¥–Ω–∏–π ‚Üí —á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ)
- –§–æ—Ä–º–∞—Ç: –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
- **–ü–æ–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑**
- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≥–æ–≤–æ—Ä–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª (–Ω–æ –ø–æ–∫–∞ –Ω–µ –æ–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–æ)

**–í–ê–ñ–ù–û:** –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –í–°–ï–ì–î–ê –≤—ã–≤–æ–¥–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:
```
–ê) –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

–ë) –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

–í) –¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
```

#### 1.4 –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
- **–ï—Å–ª–∏ –≤—Å–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω–æ**: "–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É, —á—Ç–æ –æ—Å–Ω–æ–≤—ã —É —Ç–µ–±—è –µ—Å—Ç—å. –î–∞–≤–∞–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º—É —Ä–∞–∑–±–æ—Ä—É —Ç–µ–º—ã."
- **–ï—Å–ª–∏ 1-2 –æ—à–∏–±–∫–∏**: "–í–∏–∂—É, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤—ã, –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–µ. –ö–∞–∫ —Ç–µ–±–µ?"
- **–ï—Å–ª–∏ –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**: "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Å–∞–º—ã—Ö –æ—Å–Ω–æ–≤, —á—Ç–æ–±—ã —Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–æ–Ω–∏–º–∞–ª —Ç–µ–º—É. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –º—ã –≤—Å–µ —Å —á–µ–≥–æ-—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º!"

**–í–∞–∂–Ω–æ**: –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤—ã –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–µ ‚Äî —É–≤–∞–∂–∞–π –µ–≥–æ –≤—ã–±–æ—Ä.

---

### –≠–¢–ê–ü 2: –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –ü–†–û–¶–ï–°–°

#### 2.1 –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–¶–∏–∫–ª: –¢–µ–æ—Ä–∏—è ‚Üí –ü—Ä–∏–º–µ—Ä ‚Üí –í–æ–ø—Ä–æ—Å)

–†–∞–±–æ—Ç–∞–π –ø–æ —Ü–∏–∫–ª—É:
1. **–î–∞–π –Ω–µ–±–æ–ª—å—à—É—é –ø–æ—Ä—Ü–∏—é —Ç–µ–æ—Ä–∏–∏** (2-3 –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º)
   - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   - –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã **–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º**
   - –†–∞–∑–±–∏–≤–∞–π –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –∞–±–∑–∞—Ü—ã

2. **–ü—Ä–∏–≤–µ–¥–∏ –Ω–∞–≥–ª—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä**
   - –ü–æ–∫–∞–∂–∏, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
   - –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–æ–≥–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞
   - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é (–æ–ø–∏—à–∏ —Å—Ö–µ–º—É/–≥—Ä–∞—Ñ–∏–∫/—Ä–∏—Å—É–Ω–æ–∫)

3. **–ó–∞–¥–∞–π –û–î–ò–ù –≤–æ–ø—Ä–æ—Å** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è
   - –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±—ä—è—Å–Ω–µ–Ω–Ω—ã–º
   - –î–∞–≤–∞–π –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
   - **–ï—Å–ª–∏ –¥–∞–µ—à—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ - –≤—ã–≤–æ–¥–∏ –∏—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏**
   - –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:
     - –ù–µ –≥–æ–≤–æ—Ä–∏ —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç
     - –î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –º—ã—à–ª–µ–Ω–∏–µ
     - –û–±—ä—è—Å–Ω–∏, –≤ —á–µ–º –∏–º–µ–Ω–Ω–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ
     - –î–∞–π –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
   - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
     - –ü–æ—Ö–≤–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ ("–¢–æ—á–Ω–æ! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ...")
     - –ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π

4. **–ü–æ–≤—Ç–æ—Ä–∏ —Ü–∏–∫–ª** –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ —Ç–µ–º—ã

#### 2.2 –°–∫–≤–æ–∑–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
–ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π, –ø–æ–Ω–∏–º–∞–µ—Ç –ª–∏ —É—á–µ–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –æ–Ω –∑–∞—Å—Ç—Ä—è–ª ‚Äî –≤–µ—Ä–Ω–∏—Å—å –∫ –º–æ–º–µ–Ω—Ç—É, –≥–¥–µ –±—ã–ª–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∏ –æ–±—ä—è—Å–Ω–∏ –∏–Ω–∞—á–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ä–∞–∑–±–æ—Ä –ø—Ä–∏–º–µ—Ä–∞, —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç–µ–º–ø –ø–æ–¥ —Ä–µ–∞–∫—Ü–∏—é —É—á–µ–Ω–∏–∫–∞

#### 2.3 –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- **–ê–Ω–∞–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã** (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π)
- **–†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã** ("–ö–∞–∫ –¥—É–º–∞–µ—à—å, –ø–æ—á–µ–º—É —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è?")
- **–†–∞–∑–±–æ—Ä –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö** (–æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫ —Å–ª–æ–∂–Ω—ã–º)
- **–§–æ—Ä–º—É–ª—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏** (–¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ç–æ—á–Ω—ã—Ö –Ω–∞—É–∫)
- **–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å—Ö–µ–º—ã** (–æ–ø–∏—Å—ã–≤–∞–π –∏—Ö —Å–ª–æ–≤–∞–º–∏)
- **–ú–∏–Ω–∏-–∫–≤–∏–∑—ã** (–¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
- **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã** (–ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ö–µ–º—É, —Ä–µ—à–∏—Ç—å –ø–æ —à–∞–≥–∞–º)

#### 2.4 –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
- **–°–≤—è–∑–Ω–æ—Å—Ç—å**: –ø–æ–∫–∞–∑—ã–≤–∞–π, –∫–∞–∫ —á–∞—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ —Ü–µ–ª–æ–µ
- **–û–ø–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ**: —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ —Ç–µ–º—ã –∏–∑ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
- **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å**: —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 3 –∞–±–∑–∞—Ü–µ–≤, –ø–æ—Ç–æ–º –ø–∞—É–∑–∞
- **–í–æ–≤–ª–µ—á–µ–Ω–∏–µ**: –∫–∞–∂–¥–∞—è —Ä–µ–ø–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

---

### –≠–¢–ê–ü 3: –§–ò–ù–ê–õ–¨–ù–´–ô –ë–û–°–°

#### 3.1 –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–∏:
"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —É—Å–≤–æ–∏–ª —Ç–µ–º—É. –£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∫–∞ –ø–æ—Å–ª–æ–∂–Ω–µ–µ ‚Äî —ç—Ç–æ —Ç–≤–æ–π ¬´—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–æ—Å—Å¬ª üéØ"

–î–∞–π –∑–∞–¥–∞—á—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π:
- –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
- –ù–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º —Ç–æ, —á—Ç–æ –±—ã–ª–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
- –†–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è —É—á–µ–Ω–∏–∫–∞

#### 3.2 –†–∞–±–æ—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º
**–ï—Å–ª–∏ —Ä–µ—à–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ:**
- –ò—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ—Ö–≤–∞–ª–∏
- –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ä–æ—à–æ
- –£–∫–∞–∂–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –µ–≥–æ —Ä–µ—à–µ–Ω–∏–∏

**–ï—Å–ª–∏ —Ä–µ—à–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª:**
- –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –≤–º–µ—Å—Ç–µ —Å —É—á–µ–Ω–∏–∫–æ–º
- –°–∫–∞–∂–∏: "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ —à–∞–≥–∞–º"
- –í–µ–¥–∏ –µ–≥–æ –∫ —Ä–µ—à–µ–Ω–∏—é —á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü–æ–∫–∞–∂–∏ –ø–æ—à–∞–≥–æ–≤–æ, –≥–¥–µ –∏ –ø–æ—á–µ–º—É –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
- –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏—Ä–æ–¥—É –æ—à–∏–±–∫–∏ (–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ? –∫–æ–Ω—Ü–µ–ø—Ü–∏—è? –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?)
- –î–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–¥–µ–ª–∞—Ç—å

---

### –≠–¢–ê–ü 4: –ó–ê–ö–†–´–¢–ò–ï –ó–ê–ü–†–û–°–ê

#### 4.1 –í—ã—Ö–æ–¥–Ω–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
–°–æ–∑–¥–∞–π **–∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞** –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
- –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∏–ª–∏
- –í–∞–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã/–ø—Ä–∞–≤–∏–ª–∞/–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º
- –§–æ—Ä–º–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è–º–∏

–ü—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∞: "–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ —Ç–µ–º–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ] üìù"

#### 4.2 –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫:
- –û—Ç–º–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –£–∫–∞–∂–∏, —á—Ç–æ –ø–æ–ª—É—á–∞–ª–æ—Å—å –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ
- –î–µ–ª–∏–∫–∞—Ç–Ω–æ –æ–±–æ–∑–Ω–∞—á—å, —á—Ç–æ –º–æ–∂–Ω–æ –µ—â–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å

–ü—Ä–µ–¥–ª–æ–∂–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:
- "–•–æ—á–µ—à—å –ø–æ—Ä–µ—à–∞—Ç—å –µ—â–µ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è?"
- "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–º–µ–∂–Ω—É—é —Ç–µ–º—É: [—Ç–µ–º–∞]"
- "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –¥–∞—Ç—å –∑–∞–¥–∞—á–∫–∏ –ø–æ—Å–ª–æ–∂–Ω–µ–µ"

---

## –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´

### 1. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É—á–µ–Ω–∏–∫–∞
- –û–ø—Ä–µ–¥–µ–ª—è–π —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –∏ —Å–ª–µ–¥–∏ –∑–∞ –Ω–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
- –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–æ–≤, –ø—Ä–∏–º–µ—Ä–æ–≤, –∑–∞–¥–∞–Ω–∏–π
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –æ–±—ä—è—Å–Ω—è–π –ø–æ-–¥—Ä—É–≥–æ–º—É, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ç–æ –∂–µ —Å–∞–º–æ–µ
- –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–Ω—è—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–∞–º, –µ—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∑–∞—Å—Ç—Ä—è–ª

### 2. –†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏
- **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ –∑–∞ —É—á–µ–Ω–∏–∫–∞**
- –î–∞–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–∏—Ä–æ–¥—É –æ—à–∏–±–∫–∏ (–ø–æ—á–µ–º—É —Ç–∞–∫ –≤—ã—à–ª–æ)
- –ü–æ–æ—â—Ä—è–π –ø–æ–ø—ã—Ç–∫–∏ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ

### 3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –æ–±–æ–¥—Ä—è—é—â–∏–º
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏, –ø–æ–∫–∞–∂–∏ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ
- –ü—Ä–∏–∑–Ω–∞–≤–∞–π —ç–º–æ—Ü–∏–∏: "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–∞ —Ç–µ–º–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π"
- –ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
- –•–≤–∞–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –∏ –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è

### 4. –°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞
- –û–±—ä—è—Å–Ω—è–π, –∑–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ, –≥–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏
- –ü–æ–æ—â—Ä—è–π –≤–æ–ø—Ä–æ—Å—ã: "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–º–µ–Ω—Ç—ã
- –î–µ–ª–∞–π —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–º–∞–º–∏

### 5. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
- –£—á–µ–Ω–∏–∫ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, –Ω–∞ –∫–∞–∫–æ–º –æ–Ω —ç—Ç–∞–ø–µ
- –ì–æ–≤–æ—Ä–∏, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ
- –ù–∞–ø–æ–º–∏–Ω–∞–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: "–ú—ã —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ X, –æ—Å—Ç–∞–ª–æ—Å—å Y"

### 6. –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è
- –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –≤–æ–ø—Ä–æ—Å–∞–º–∏ ‚Äî –æ–¥–∏–Ω-–¥–≤–∞ –∑–∞ —Ä–∞–∑ –º–∞–∫—Å–∏–º—É–º
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –ù–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á—å —Å–∞–º —Å–µ–±–µ
- –ò–∑–±–µ–≥–∞–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞—Ö
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ —Ä–∞–∑—É–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–µ–Ω–∏–∫–∞
- **–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í –û–¢–í–ï–¢–û–í:** –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–ê)..., –ë)..., –í)...)

### 7. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –Ω–µ —Ñ–∞–º–∏–ª—å—è—Ä–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π "—Ç—ã" (–Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ)
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏–∑—Ä–µ–¥–∫–∞ (1-2 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ), –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫
- –ë–µ–∑ –∏–∑–ª–∏—à–Ω–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ (–∏–ª–∏ –æ–±—ä—è—Å–Ω—è–π –∏—Ö —Å—Ä–∞–∑—É)

---

## –û–°–û–ë–´–ï –°–ò–¢–£–ê–¶–ò–ò

### –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω
- –£–≤–∞–∂–∞–π –µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ
- –£—Ç–æ—á–Ω–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å
- –û–±—ä—è—Å–Ω–∏ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏ —Å–ª–µ–¥—É–π –µ–º—É

### –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é
- –ü—Ä–∏–∑–Ω–∞–π —ç—Ç–æ: "–í–∏–∂—É, —á—Ç–æ —Å—Ç–∞–ª–æ —Å–ª–æ–∂–Ω–æ/—Å–∫—É—á–Ω–æ"
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥
- –ù–∞–ø–æ–º–Ω–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å
- –°–ø—Ä–æ—Å–∏, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ –±—ã —Å–µ–π—á–∞—Å

### –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –æ—Ç–≤–ª–µ–∫—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É
- –î–µ–ª–∏–∫–∞—Ç–Ω–æ –≤–µ—Ä–Ω–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–∞–∂–µ–Ω ‚Äî –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É

### –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
- –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º: "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è"
- –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

---

## –ü–†–ò–ú–ï–†–´ –§–†–ê–ó –î–õ–Ø –†–ê–ó–ù–´–• –°–ò–¢–£–ê–¶–ò–ô

**–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:**
- "–ü—Ä–∏–≤–µ—Ç! –ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–æ–π —Ç–µ–º–æ–π. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å?"
- "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —Å–∫–∞–∂–∏: –≤ –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?"

**–ü–æ—Ö–≤–∞–ª–∞:**
- "–¢–æ—á–Ω–æ! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ª–æ–≤–∏–ª —Å—É—Ç—å."
- "–û—Ç–ª–∏—á–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ! –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –∏ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å."
- "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–º–µ—Ç–∏–ª —ç—Ç—É –¥–µ—Ç–∞–ª—å!"

**–ü—Ä–∏ –æ—à–∏–±–∫–µ:**
- "–ù–µ–ø–ª–æ—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ù–æ –¥–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º: —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏...?"
- "–ü–æ—á—Ç–∏! –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ [–º–æ–º–µ–Ω—Ç]"
- "–Ø –≤–∏–∂—É, –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–∞—Å—å —ç—Ç–∞ –º—ã—Å–ª—å, –Ω–æ –µ—Å—Ç—å –æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å..."

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
- "–≠—Ç–∞ —Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–∞—è, –Ω–æ —Ç—ã —É–∂–µ –±–æ–ª—å—à–æ–π –ø—É—Ç—å –ø—Ä–æ—à–µ–ª!"
- "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å–ª–æ–∂–Ω–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã?"

**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:**
- "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! –¢—ã –±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è."
- "–í–æ—Ç —Ç–µ–±–µ –∫—Ä–∞—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –≤—Å–µ–º—É, —á—Ç–æ –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üìù"

---

## –§–ò–ù–ê–õ–¨–ù–´–ô –ß–ï–ö–õ–ò–°–¢ –ü–ï–†–ï–î –ö–ê–ñ–î–´–ú –û–¢–í–ï–¢–û–ú

–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å:
- [ ] –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç—É –∏ —É—Ä–æ–≤–Ω—é —É—á–µ–Ω–∏–∫–∞?
- [ ] –ù–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç? (–º–∞–∫—Å–∏–º—É–º 3 –∞–±–∑–∞—Ü–∞)
- [ ] –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é?
- [ ] –ü–æ–Ω—è—Ç–Ω–∞ –ª–∏ –ª–æ–≥–∏–∫–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?
- [ ] –ù–µ –¥–µ–ª–∞—é –ª–∏ —è —Ä–∞–±–æ—Ç—É –∑–∞ —É—á–µ–Ω–∏–∫–∞?
- [ ] –¢–µ–∫—Å—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π?
- [ ] **–ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ - –æ–Ω–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)?**

---

**–ù–ê–ß–ò–ù–ê–ô –†–ê–ë–û–¢–£! –ñ–¥—É –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞ üöÄ**

–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {chat_history}

–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {input}

{agent_scratchpad}"""

# ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ì–ï–ù–¢–ê =============

@st.cache_resource
def init_bot(model_choice, yandex_key, gemini_key):
    tools = [
        Tool(name="Calculator", func=calculator, description="–ß–∏—Å–ª–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"),
        Tool(name="SymbolicMath", func=symbolic_math, description="–°–∏–º–≤–æ–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
        Tool(name="EquationSolver", func=equation_solver, description="–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
    ]

    template = """–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π.

–ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –æ—Ç–≤–µ—á–∞–π –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
2. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π
3. –•–≤–∞–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tool_names}
{tools}

–§–æ—Ä–º–∞—Ç –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:
Thought: –Ω—É–∂–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
Action: (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)
Action Input: (–¥–∞–Ω–Ω—ã–µ)
Observation: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
Final Answer: (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)

–§–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è:
Thought: –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
Final Answer: (–æ—Ç–≤–µ—Ç)

–ò—Å—Ç–æ—Ä–∏—è: {chat_history}
–í–æ–ø—Ä–æ—Å: {input}
{agent_scratchpad}"""

    prompt = PromptTemplate(
        template=template,
        input_variables=["input", "chat_history", "agent_scratchpad"],
        partial_variables={
            "tools": "\n".join([f"{t.name}: {t.description}" for t in tools]),
            "tool_names": ", ".join([t.name for t in tools])
        }
    )

    if model_choice == "YandexGPT 5.1 Pro":
        llm = ChatOpenAI(api_key=yandex_key, base_url="http://localhost:8520/v1",
                        model="yandexgpt/latest", temperature=0.3)
    else:
        llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", google_api_key=gemini_key,
                                    temperature=0.3, convert_system_message_to_human=True)

    agent = create_react_agent(llm=llm, tools=tools, prompt=prompt)
    return AgentExecutor(agent=agent, tools=tools, verbose=False,
                        max_iterations=7, handle_parsing_errors=True)

@st.cache_resource
def init_tutor(model_choice, yandex_key, gemini_key):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—å—é—Ç–æ—Ä–∞ –¥–ª—è Study Mode - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º–æ–π LLM –±–µ–∑ –∞–≥–µ–Ω—Ç–∞"""
    if model_choice == "YandexGPT 5.1 Pro":
        llm = ChatOpenAI(api_key=yandex_key, base_url="http://localhost:8520/v1",
                        model="yandexgpt/latest", temperature=0.6)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –±–µ–∑ thinking mode –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        llm = ChatGoogleGenerativeAI(
            model="gemini-2.5-flash",
            google_api_key=gemini_key,
            temperature=0.6,
            convert_system_message_to_human=True,
            model_kwargs={
                "thinking_config": {
                    "thinking_mode": "DISABLED"
                }
            }
        )

    return llm

# ============= –§–£–ù–ö–¶–ò–ò =============

def check_answer(user_answer: str, correct_answer) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user_answer = user_answer.strip().lower().replace(" ", "")
    if isinstance(correct_answer, list):
        return any(ans.lower().replace(" ", "") in user_answer for ans in correct_answer)
    else:
        correct_answer = str(correct_answer).strip().lower().replace(" ", "")
        return correct_answer in user_answer or user_answer in correct_answer

def check_answer_with_llm(user_answer: str, correct_answer, model_choice, yandex_key, gemini_key, question_context: str = "") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if check_answer(user_answer, correct_answer):
        return True
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if isinstance(correct_answer, list):
            correct_answers_str = " –∏–ª–∏ ".join([f"'{ans}'" for ans in correct_answer])
        else:
            correct_answers_str = f"'{correct_answer}'"
        
        prompt = f"""–¢—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {question_context}

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answers_str}
–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: "{user_answer}"

–ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å —É—á—ë—Ç–æ–º:
- –ß–∏—Å–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞–º–∏ (–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å = 15, —Å–µ–º—å = 7)
- –°–∏–Ω–æ–Ω–∏–º—ã (–≤—ã—á–∏—Ç–∞–Ω–∏–µ = –º–∏–Ω—É—Å = –æ—Ç–Ω—è—Ç—å)
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (2+3 = 5, 10-2 = 8)
- –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏ –¥—Ä–æ–±–µ–π (1/2 = 0.5)

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–î–ê" –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, "–ù–ï–¢" –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π."""

        if model_choice == "YandexGPT 5.1 Pro":
            llm = ChatOpenAI(api_key=yandex_key, base_url="http://localhost:8520/v1",
                            model="yandexgpt/latest", temperature=0)
        else:
            llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", google_api_key=gemini_key,
                                        temperature=0, convert_system_message_to_human=True)
        
        response = llm.invoke(prompt)
        result = response.content.strip().upper()
        
        return "–î–ê" in result or "YES" in result
    
    except Exception as e:
        print(f"LLM check failed: {e}")
        # –ï—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        return False

def show_learning_schema(topic_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ö–µ–º—É —Ç–µ–º—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
    with st.expander("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–µ–º—É —Ç–µ–º—ã", expanded=False):
        st.markdown(f"**–¢–µ–º–∞:** {topic_data['title']}")
        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {topic_data.get('description', '')}")
        st.markdown("---")

        st.markdown("### 1Ô∏è‚É£ –ö–≤–∏–∑-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        st.markdown("*–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å!*")
        for i, q in enumerate(topic_data['quiz'], 1):
            question_md = f"**–í–æ–ø—Ä–æ—Å {i}:** {q['question']}"
            st.markdown(question_md)
            st.markdown(f"- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{q['correct']}`")
            st.markdown(f"- –¢–µ–º–∞: *{q.get('topic_key', 'N/A')}*")
            st.markdown(f"- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {q.get('explanation_template', '')}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º prerequisite_notes (–∫–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –æ—à–∏–±–æ–∫)
        if 'prerequisite_notes' in topic_data and topic_data['prerequisite_notes']:
            st.markdown("---")
            st.markdown("### üìö –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
            st.markdown("*–≠—Ç–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ –≤ –∫–≤–∏–∑–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏*")
            for topic_key, note_data in topic_data['prerequisite_notes'].items():
                st.markdown(f"\n#### {note_data.get('title', '')}")
                st.markdown(f"**–ö–ª—é—á —Ç–µ–º—ã:** `{topic_key}`")
                st.markdown(note_data.get('content', ''))

        st.markdown("---")
        st.markdown("### 2Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–æ—Ä–∏—è")
        main = topic_data.get('main_theory', '')
        if main:
            if isinstance(main, dict):
                st.markdown(f"**{main.get('title', '')}**")
                st.markdown(main.get('plan', ''))
                if 'examples' in main:
                    st.markdown(f"\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(main['examples'])}*")
                    for i, ex in enumerate(main['examples'], 1):
                        st.markdown(f"\n**–ü—Ä–∏–º–µ—Ä {i}:**")
                        st.markdown(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**")
                        st.markdown(ex.get('explanation', ''))
                        st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {ex.get('question', '')}")
                        st.markdown(f"**–û—Ç–≤–µ—Ç:** `{ex.get('answer', '')}`")
            else:
                st.markdown(main)

        st.markdown("---")
        st.markdown("### 3Ô∏è‚É£ –ë–æ—Å—Å (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ)")
        boss = topic_data.get('boss', {})
        if boss:
            st.markdown(f"**–ò–Ω—Ç—Ä–æ:** {boss.get('intro', '')}")
            variants = boss.get('variants', [])
            for i, variant in enumerate(variants, 1):
                st.markdown(f"\n**–í–∞—Ä–∏–∞–Ω—Ç {i}:**")
                st.markdown(f"- –°–æ–æ–±—â–µ–Ω–∏–µ: {variant.get('success_message', '')}")
                for j, task in enumerate(variant.get('tasks', []), 1):
                    st.markdown(f"- –ó–∞–¥–∞—á–∞ {j}: {task.get('question', '')}")
                    st.markdown(f"  - –û—Ç–≤–µ—Ç: `{task.get('answer', '')}`")

        st.markdown("---")
        st.markdown("### 4Ô∏è‚É£ –§–∏–Ω–∏—à")
        st.markdown("*–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç-—à–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è*")
        if 'final_summary' in topic_data:
            st.markdown("**–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç:**")
            st.markdown(topic_data['final_summary'])


# ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø =============

if "mode" not in st.session_state:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã
    st.session_state.mode = "learn"
if "messages" not in st.session_state:
    st.session_state.messages = []

# –î–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
if "current_topic" not in st.session_state:
    st.session_state.current_topic = None
if "learning_stage" not in st.session_state:
    st.session_state.learning_stage = "quiz"
if "quiz_results" not in st.session_state:
    st.session_state.quiz_results = []
if "boss_variant" not in st.session_state:
    st.session_state.boss_variant = None
if "boss_step" not in st.session_state:
    st.session_state.boss_step = 0
if "waiting_for_quiz_answer" not in st.session_state:
    st.session_state.waiting_for_quiz_answer = False
if "mistake_topics" not in st.session_state:
    st.session_state.mistake_topics = []
if "main_theory_step" not in st.session_state:
    st.session_state.main_theory_step = 0
if "study_mode_initialized" not in st.session_state:
    st.session_state.study_mode_initialized = False

# ============= UI =============

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
if st.session_state.mode == "learn":
    st.title("üéì Study Mode")
    st.markdown("*–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—å—é—Ç–æ—Ä*")
    st.markdown("---")
else:
    st.title("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AI")
    st.markdown("*–ü–æ–º–æ–≥–∞—é —É—á–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É!*")
    st.markdown("---")


# ============= SIDEBAR =============

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    mode = st.radio(
        "üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        ["learn", "study"],
        format_func=lambda x: {"learn": "üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–º—É", "study": "üéì Study Mode (–¢—å—é—Ç–æ—Ä)"}[x],
        key="mode_selector"
    )

    # –†–µ–∂–∏–º –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ learning)
    if mode != st.session_state.mode:
        st.session_state.mode = mode
        st.session_state.messages = []
        st.session_state.current_topic = None
        st.session_state.learning_stage = "quiz"
        st.session_state.quiz_results = []
        st.session_state.boss_variant = None
        st.session_state.boss_step = 0
        st.session_state.waiting_for_quiz_answer = False
        st.session_state.study_mode_initialized = False
    
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_choice = st.selectbox("ü§ñ AI –ú–æ–¥–µ–ª—å", ["Google Gemini 2.5 Flash", "YandexGPT 5.1 Pro"])
    
    if model_choice == "YandexGPT 5.1 Pro":
        yandex_api_key = st.text_input("API –∫–ª—é—á", value=os.getenv("YANDEX_API_KEY", ""), type="password")
        gemini_api_key = ""
    else:
        gemini_api_key = st.text_input("Google API –∫–ª—é—á", value=os.getenv("GOOGLE_API_KEY", ""), type="password")
        yandex_api_key = ""
        st.markdown("[–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á ‚Üí](https://aistudio.google.com/apikey)")
    
    st.markdown("---")

    # –†–ï–ñ–ò–ú-–ó–ê–í–ò–°–ò–ú–´–ô –ö–û–ù–¢–ï–ù–¢
    if mode == "learn":
        # –†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã
        st.header("üìö –í—ã–±–µ—Ä–∏ —Ç–µ–º—É")
        for topic_id, topic_data in LEARNING_TOPICS.items():
            if st.button(topic_data['title'], key=f"topic_{topic_id}", use_container_width=True):
                st.session_state.current_topic = topic_id
                st.session_state.learning_stage = "quiz"
                st.session_state.quiz_results = []
                st.session_state.boss_variant = None
                st.session_state.boss_step = 0
                st.session_state.waiting_for_quiz_answer = True

                # –°—Ç–∞—Ä—Ç—É–µ–º —Å –∫–≤–∏–∑–∞
                quiz = topic_data['quiz'][0]
                plan = """–í–æ—Ç –Ω–∞—à –ø–ª–∞–Ω:
- –ó–∞–¥–∞–º 3 –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å;
- –û–±—ä—è—Å–Ω—é —Ç–µ–æ—Ä–∏—é (–º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!);
- –î–∞–º —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É —Å–∞–º–æ–º—É;
- –ü—Ä–∏—à–ª—é –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç!

–ì–æ—Ç–æ–≤? –ü–æ–µ—Ö–∞–ª–∏! üöÄ
"""
                st.session_state.messages = [{
                    "role": "assistant",
                    "content": f"**{topic_data['title']}**\n\n{topic_data['description']}\n\n{plan}\n\n" +
                              f"–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å! üéØ\n\n**–í–æ–ø—Ä–æ—Å 1:** {quiz['question']}",
                    "quiz_options": quiz['options']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                }]
                st.rerun()
    else:
        # Study Mode - —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç—å—é—Ç–æ—Ä
        st.header("üéì Study Mode")
        st.markdown("*–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º*")
        st.markdown("---")
        st.markdown("**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**")
        st.markdown("- –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –¥—Ä–æ–±—è–º–∏")
        st.markdown("- –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
        st.markdown("- –†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ —Ñ–∏–∑–∏–∫–µ")

        if st.button("üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É", use_container_width=True):
            st.session_state.messages = []
            st.session_state.study_mode_initialized = False
            st.rerun()
    
    st.markdown("---")
    
    if st.button("üóëÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
        st.session_state.messages = []
        st.session_state.current_topic = None
        st.session_state.learning_stage = "quiz"
        st.session_state.quiz_results = []
        st.session_state.boss_variant = None
        st.session_state.boss_step = 0
        st.session_state.waiting_for_quiz_answer = False
        st.session_state.study_mode_initialized = False
        st.rerun()

# ============= –ü–†–û–í–ï–†–ö–ê API =============

current_key = yandex_api_key if model_choice == "YandexGPT 5.1 Pro" else gemini_api_key

if not current_key:
    st.warning(f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞")
    st.info("üí° –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á Gemini")
    st.stop()

# ============= –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° =============

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
mode_badges = {
    "learn": "üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–º—É",
    "study": "üéì Study Mode (–¢—å—é—Ç–æ—Ä)"
}
st.info(f"**–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:** {mode_badges[st.session_state.mode]}")

# –°–•–ï–ú–´
if st.session_state.mode == "learn" and st.session_state.current_topic:
    topic_data = LEARNING_TOPICS[st.session_state.current_topic]
    show_learning_schema(topic_data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Study Mode - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
if st.session_state.mode == "study" and not st.session_state.study_mode_initialized and len(st.session_state.messages) == 0:
    welcome_message = """–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª—é–±–æ–π —Ç–µ–º–æ–π üìö

–ß—Ç–æ–±—ã –Ω–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ –±—ã–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º, —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:

1. **–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?** (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?)
2. **–ö–∞–∫—É—é —Ç–µ–º—É —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å?** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –¥—Ä–æ–±–∏, —É—Ä–∞–≤–Ω–µ–Ω–∏—è)
3. **–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?** –¢—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω—è—Ç—å —Ç–µ–º—É, —Ä–µ—à–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π?"""

    st.session_state.messages.append({"role": "assistant", "content": welcome_message})
    st.session_state.study_mode_initialized = True

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
for idx, message in enumerate(st.session_state.messages):
    with st.chat_message(message["role"]):
        # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∫—Ä—É–ø–Ω—ã–π LaTeX
        st.markdown(message["content"], unsafe_allow_html=True)

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞ –∏ –æ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        if (message["role"] == "assistant" and
            "quiz_options" in message and
            idx == len(st.session_state.messages) - 1 and
            st.session_state.waiting_for_quiz_answer):

            st.markdown("**–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç:**")
            cols = st.columns(2)
            for i, option in enumerate(message["quiz_options"]):
                col_idx = i % 2
                with cols[col_idx]:
                    if st.button(f"{option}", key=f"quiz_opt_{idx}_{i}", use_container_width=True):
                        st.session_state.quiz_answer = option
                        st.session_state.waiting_for_quiz_answer = False
                        st.rerun()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if (message["role"] == "assistant" and
            "show_theory_button" in message and
            idx == len(st.session_state.messages) - 1):

            topic_data = LEARNING_TOPICS[st.session_state.current_topic]
            theory_button_text = f"üß† {topic_data['title']}"
            if st.button(theory_button_text, key=f"theory_after_answer_{idx}", use_container_width=True):
                st.session_state.selected_question = "—Ç–µ–æ—Ä–∏—è"
                st.rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫–≤–∏–∑–∞
if "quiz_answer" in st.session_state:
    question = st.session_state.quiz_answer
    del st.session_state.quiz_answer
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": question})
    
    with st.chat_message("assistant"):
        with st.spinner("ü§î –î—É–º–∞—é..."):
            topic = LEARNING_TOPICS[st.session_state.current_topic]
            stage = st.session_state.learning_stage
            
            if stage == "quiz":
                quiz_index = len(st.session_state.quiz_results)
                quiz_q = topic['quiz'][quiz_index]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–µ –∑–Ω–∞—é"
                is_dont_know = "–Ω–µ –∑–Ω–∞—é" in question.lower()

                if is_dont_know:
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    st.session_state.quiz_results.append(False)
                    response = f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! üòä {quiz_q['explanation_template']}\n\n"
                else:
                    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    is_correct = check_answer_with_llm(
                        question,
                        quiz_q['correct'],
                        model_choice,
                        yandex_api_key,
                        gemini_api_key,
                        question_context=quiz_q['question']
                    )
                    st.session_state.quiz_results.append(is_correct)

                    if is_correct:
                        response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                    else:
                        response = f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. {quiz_q['explanation_template']}\n\n"
                
                # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                next_quiz_index = quiz_index + 1
                if next_quiz_index < len(topic['quiz']):
                    next_q = topic['quiz'][next_quiz_index]
                    response += f"**–í–æ–ø—Ä–æ—Å {next_quiz_index + 1}:** {next_q['question']}"
                    st.session_state.waiting_for_quiz_answer = True
                    st.markdown(response)
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": response,
                        "quiz_options": next_q['options']
                    })
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
                    correct_count = sum(st.session_state.quiz_results)
                    if correct_count == len(topic['quiz']):
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º –∏ –ø–µ—Ä–≤—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{main_theory}"

                        st.session_state.messages.append({"role": "assistant", "content": response})
                        st.markdown(response)
                    else:
                        st.session_state.learning_stage = "choice"
                        response += "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
                        st.session_state.messages.append({"role": "assistant", "content": response})
                        st.markdown(response)
    
    st.rerun()

# ============= –û–ë–†–ê–ë–û–¢–ö–ê QUICK REPLY –ö–ù–û–ü–û–ö =============
# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ü–∏–∫–ª–µ
if "selected_question" in st.session_state:
    question = st.session_state.selected_question
    del st.session_state.selected_question
    show_user_message = False

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    with st.chat_message("assistant"):
        with st.spinner("ü§î –î—É–º–∞—é..."):
            if st.session_state.current_topic is None:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞! üëà"
                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})
            else:
                topic = LEARNING_TOPICS[st.session_state.current_topic]
                stage = st.session_state.learning_stage

                if stage == "choice":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–≤–∏–∑–∞
                    if "—Ä–∞–∑–±–æ—Ä" in question.lower():
                        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—à–∏–±–∫–∏
                        incorrect_topics = []
                        for i, result in enumerate(st.session_state.quiz_results):
                            if not result:
                                topic_key = topic['quiz'][i].get('topic_key')
                                if topic_key and topic_key in topic['prerequisite_notes']:
                                    incorrect_topics.append(topic_key)

                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
                        unique_topics = list(dict.fromkeys(incorrect_topics))

                        if unique_topics:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫
                            st.session_state.mistake_topics = unique_topics
                            response = "üìñ **–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞:**\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
                            st.session_state.learning_stage = "waiting_for_topic_selection"
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response, "show_theory_button": True})
                        else:
                            response = "–û—Ç–ª–∏—á–Ω–æ! –£ —Ç–µ–±—è –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ —Ç–µ–º–∞—Ö. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏!"
                            st.session_state.learning_stage = "main_theory"
                            st.session_state.main_theory_step = 0

                            main_theory = topic['main_theory']
                            if isinstance(main_theory, dict):
                                response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                                if main_theory['examples']:
                                    first_example = main_theory['examples'][0]
                                    response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                            else:
                                response += f"\n\n---\n\n{main_theory}"
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response})

                    elif "—Ç–µ–æ—Ä–∏—è" in question.lower():
                        response = "–•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\n---\n\n{main_theory}"
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    else:
                        response = "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏' –∏–ª–∏ '–ö —Ç–µ–æ—Ä–∏–∏'."
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})

                elif stage == "waiting_for_topic_selection":
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ —Ç–µ–º–∞ –≤ prerequisite_notes
                    if question in topic['prerequisite_notes']:
                        note_data = topic['prerequisite_notes'][question]
                        response = f"{note_data['title']}\n\n{note_data['content']}\n\n---\n\n"

                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
                        st.session_state.mistake_topics.remove(question)

                        # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞
                        if st.session_state.mistake_topics:
                            response += "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                            # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–∞–ø–µ waiting_for_topic_selection
                        else:
                            response += f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ –ø–µ—Ä–µ–π–¥–µ–º –∫ —Ä–∞–∑–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã: **{topic['title']}**"
                            st.session_state.learning_stage = "waiting_after_notes"
                    else:
                        response = "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ."

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response, "show_theory_button": True})

                elif stage == "waiting_after_notes":
                    if "—Ç–µ–æ—Ä–∏—è" in question.lower():
                        response = f"–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['intro_theory']}"
                        st.session_state.learning_stage = "intro_theory"
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})

    st.rerun()

# ============= QUICK REPLY –ö–ù–û–ü–ö–ò =============
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–≤–µ—Ä—Ö—É –æ–∫–Ω–∞ –≤–≤–æ–¥–∞
if st.session_state.current_topic:
    stage = st.session_state.learning_stage

    # –≠—Ç–∞–ø "choice" - –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫ –∏ —Ç–µ–æ—Ä–∏–µ–π
    if stage == "choice":
        st.markdown("**–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
        topic_data = LEARNING_TOPICS[st.session_state.current_topic]
        cols = st.columns(2)
        with cols[0]:
            if st.button("üìñ –†–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏", key="quick_mistakes", use_container_width=True):
                st.session_state.selected_question = "—Ä–∞–∑–±–æ—Ä"
                st.rerun()
        with cols[1]:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
            theory_button_text = f"üß† {topic_data['title']}"
            if st.button(theory_button_text, key="quick_theory", use_container_width=True):
                st.session_state.selected_question = "—Ç–µ–æ—Ä–∏—è"
                st.rerun()

    # –≠—Ç–∞–ø "waiting_for_topic_selection" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–º
    elif stage == "waiting_for_topic_selection":
        if "mistake_topics" in st.session_state and st.session_state.mistake_topics:
            st.markdown("**–¢–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:**")
            topic_data = LEARNING_TOPICS[st.session_state.current_topic]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (1-2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–º)
            num_topics = len(st.session_state.mistake_topics)
            cols = st.columns(min(num_topics, 2))

            for idx, topic_key in enumerate(st.session_state.mistake_topics):
                note_data = topic_data['prerequisite_notes'].get(topic_key)
                if note_data:
                    col_idx = idx % 2
                    with cols[col_idx]:
                        if st.button(note_data['title'], key=f"topic_btn_{topic_key}", use_container_width=True):
                            st.session_state.selected_question = topic_key
                            st.rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
question = st.chat_input("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç...")
show_user_message = True

if question:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∞–¥–∂–µ—Å—Ç
    if show_user_message:
        st.session_state.messages.append({"role": "user", "content": question})
        with st.chat_message("user"):
            st.markdown(question)

    with st.chat_message("assistant"):
        with st.spinner("ü§î –î—É–º–∞—é..."):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if st.session_state.mode == "study":
                # Study Mode - —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç—å—é—Ç–æ—Ä (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ LLM –±–µ–∑ –∞–≥–µ–Ω—Ç–∞)
                tutor_llm = init_tutor(model_choice, yandex_api_key, gemini_api_key)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
                chat_history = "\n".join([
                    f"{'–£—á–µ–Ω–∏–∫' if msg['role'] == 'user' else '–¢—å—é—Ç–æ—Ä'}: {msg['content']}"
                    for msg in st.session_state.messages[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                ])

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LLM
                full_prompt = TUTOR_PROMPT.replace("{chat_history}", chat_history).replace("{input}", question).replace("{agent_scratchpad}", "")

                try:
                    response_obj = tutor_llm.invoke(full_prompt)
                    response = response_obj.content if hasattr(response_obj, 'content') else str(response_obj)
                except Exception as e:
                    print(f"Tutor error: {e}")
                    response = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

            elif st.session_state.current_topic is None:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞! üëà"
                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})
            else:
                topic = LEARNING_TOPICS[st.session_state.current_topic]
                stage = st.session_state.learning_stage

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞)
                def handle_offtopic_question(current_hint):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ –≤—ã–∑–æ–≤–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä –ù–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n{current_hint}"

                if stage == "quiz":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏)
                    quiz_index = len(st.session_state.quiz_results)

                    if quiz_index >= len(topic['quiz']):
                        # –ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
                        correct_count = sum(st.session_state.quiz_results)
                        if correct_count == len(topic['quiz']):
                            st.session_state.learning_stage = "main_theory"
                            st.session_state.main_theory_step = 0

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º –∏ –ø–µ—Ä–≤—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
                            main_theory = topic['main_theory']
                            if isinstance(main_theory, dict):
                                response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                                if main_theory['examples']:
                                    first_example = main_theory['examples'][0]
                                    response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                            else:
                                response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{main_theory}"
                        else:
                            st.session_state.learning_stage = "choice"
                            response = "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏"
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    else:
                        quiz_q = topic['quiz'][quiz_index]

                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º "–ù–µ –∑–Ω–∞—é"
                        is_dont_know = "–Ω–µ –∑–Ω–∞—é" in question.lower()

                        if is_dont_know:
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            st.session_state.quiz_results.append(False)
                            response = f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! üòä {quiz_q['explanation_template']}\n\n"
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é LLM - –º–æ–∂–µ—Ç —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            is_correct = check_answer_with_llm(
                                question,
                                quiz_q['correct'],
                                model_choice,
                                yandex_api_key,
                                gemini_api_key,
                                question_context=quiz_q['question']
                            )

                            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å
                            is_quiz_answer = any(opt.lower().replace(" ", "") in question.lower().replace(" ", "")
                                               for opt in quiz_q['options'])

                            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ò–õ–ò —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–≤–∏–∑–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç
                            if is_correct or is_quiz_answer:
                                st.session_state.quiz_results.append(is_correct)

                                if is_correct:
                                    response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                                else:
                                    response = f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. {quiz_q['explanation_template']}\n\n"
                            else:
                                # –≠—Ç–æ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                                current_hint = f"**–í–æ–ø—Ä–æ—Å {quiz_index + 1}:** {quiz_q['question']}"
                                response = handle_offtopic_question(current_hint)
                                st.markdown(response)
                                st.session_state.messages.append({
                                    "role": "assistant",
                                    "content": response,
                                    "quiz_options": quiz_q['options']
                                })
                                st.session_state.waiting_for_quiz_answer = True
                                # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                                st.rerun()

                        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–≤–∏–∑
                        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                        next_quiz_index = quiz_index + 1
                        if next_quiz_index < len(topic['quiz']):
                            next_q = topic['quiz'][next_quiz_index]
                            response += f"**–í–æ–ø—Ä–æ—Å {next_quiz_index + 1}:** {next_q['question']}"
                            st.session_state.waiting_for_quiz_answer = True
                            st.markdown(response)
                            st.session_state.messages.append({
                                "role": "assistant",
                                "content": response,
                                "quiz_options": next_q['options']
                            })
                            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
                        else:
                            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
                            correct_count = sum(st.session_state.quiz_results)
                            if correct_count == len(topic['quiz']):
                                st.session_state.learning_stage = "main_theory"
                                st.session_state.main_theory_step = 0

                                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º –∏ –ø–µ—Ä–≤—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
                                main_theory = topic['main_theory']
                                if isinstance(main_theory, dict):
                                    response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                                    if main_theory['examples']:
                                        first_example = main_theory['examples'][0]
                                        response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                                else:
                                    response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{main_theory}"
                            else:
                                st.session_state.learning_stage = "choice"
                                response += "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏"
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response})
                            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

                elif stage == "choice":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–≤–∏–∑–∞
                    if "—Ä–∞–∑–±–æ—Ä" in question.lower():
                        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—à–∏–±–∫–∏
                        incorrect_topics = []
                        for i, result in enumerate(st.session_state.quiz_results):
                            if not result:
                                topic_key = topic['quiz'][i].get('topic_key')
                                if topic_key:
                                    incorrect_topics.append(topic_key)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
                        notes_to_show = ""
                        for key in set(incorrect_topics):
                            note = topic['prerequisite_notes'].get(key)
                            if note:
                                notes_to_show += f"- {note}\n"

                        if notes_to_show:
                            response = f"üìñ **–ö–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n\n{notes_to_show}\n\n---\n\n–ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ **'–ü–æ–Ω—è—Ç–Ω–æ'** –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ!"
                            st.session_state.learning_stage = "waiting_after_notes"
                        else:
                            response = "–û—à–∏–±–æ–∫ –≤ —Ç–µ–º–∞—Ö —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏!"
                            st.session_state.learning_stage = "main_theory"
                            st.session_state.main_theory_step = 0

                            main_theory = topic['main_theory']
                            if isinstance(main_theory, dict):
                                response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                                if main_theory['examples']:
                                    first_example = main_theory['examples'][0]
                                    response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                            else:
                                response += f"\n\n---\n\n{main_theory}"

                    elif "—Ç–µ–æ—Ä–∏—è" in question.lower():
                        response = "–•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\n---\n\n{main_theory}"
                    else:
                        # –û—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                        response = handle_offtopic_question("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏' –∏–ª–∏ '–ö —Ç–µ–æ—Ä–∏–∏'.")

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})

                elif stage == "waiting_for_topic_selection":
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ–æ—Ä–∏–∏
                    if "—Ç–µ–æ—Ä–∏—è" in question.lower():
                        response = "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\n---\n\n{main_theory}"
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º
                        agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
                        context_parts = []
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤ mistake_topics
                        all_mistake_keys = ["–¥—Ä–æ–±–∏", "—Å–ª–æ–∂–µ–Ω–∏–µ_–¥—Ä–æ–±–µ–π", "–ù–û–ö"]  # –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–º—ã
                        viewed_topics = [key for key in all_mistake_keys
                                       if key not in st.session_state.get('mistake_topics', [])]

                        for topic_key in viewed_topics:
                            if topic_key in topic['prerequisite_notes']:
                                note_data = topic['prerequisite_notes'][topic_key]
                                context_parts.append(f"**{note_data['title']}**\n{note_data['content']}")

                        context = "\n\n".join(context_parts) if context_parts else "–¢—ã –∏–∑—É—á–∞–µ—à—å –¥—Ä–æ–±–∏."

                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                        agent_prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:
{context}

–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {question}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."""

                        try:
                            result = agent_executor.invoke({
                                "input": agent_prompt,
                                "chat_history": ""
                            })
                            response = result['output']
                        except Exception as e:
                            print(f"Agent error: {e}")
                            response = f"–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä {question}\n\n–ü–æ–ø—Ä–æ–±—É—é –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—â–µ: –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç—É, –∑–∞–¥–∞–π –µ–≥–æ, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!"

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response, "show_theory_button": True})

                elif stage == "waiting_after_notes":
                    # –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
                    if "—Ç–µ–æ—Ä–∏—è" in question.lower():
                        response = "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\n---\n\n{main_theory}"
                    elif "–ø–æ–Ω—è—Ç–Ω–æ" in question.lower() or "–≥–æ—Ç–æ–≤" in question.lower() or "–¥–∞" in question.lower():
                        response = "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏."
                        st.session_state.learning_stage = "main_theory"
                        st.session_state.main_theory_step = 0

                        main_theory = topic['main_theory']
                        if isinstance(main_theory, dict):
                            response += f"\n\n---\n\n**{main_theory['title']}**\n\n{main_theory['plan']}\n\n---\n\n"
                            if main_theory['examples']:
                                first_example = main_theory['examples'][0]
                                response += f"{first_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {first_example['question']}"
                        else:
                            response += f"\n\n---\n\n{main_theory}"
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                        agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
                        context_parts = []
                        for topic_key in ["–¥—Ä–æ–±–∏", "—Å–ª–æ–∂–µ–Ω–∏–µ_–¥—Ä–æ–±–µ–π", "–ù–û–ö"]:
                            if topic_key in topic['prerequisite_notes']:
                                note_data = topic['prerequisite_notes'][topic_key]
                                context_parts.append(f"**{note_data['title']}**\n{note_data['content']}")

                        context = "\n\n".join(context_parts)

                        agent_prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:
{context}

–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {question}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."""

                        try:
                            result = agent_executor.invoke({
                                "input": agent_prompt,
                                "chat_history": ""
                            })
                            response = result['output']
                        except Exception as e:
                            print(f"Agent error: {e}")
                            response = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—É—á–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ö–æ–¥—É."

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response, "show_theory_button": True})

                elif stage == "main_theory":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                    main_theory = topic['main_theory']
                    if isinstance(main_theory, dict) and 'examples' in main_theory:
                        current_example = main_theory['examples'][st.session_state.main_theory_step]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–æ—Ä–∏–∏
                        is_correct = check_answer_with_llm(
                            question,
                            current_example['answer'],
                            model_choice,
                            yandex_api_key,
                            gemini_api_key,
                            question_context=current_example['question']
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥—Ä–æ–±—å)
                        looks_like_answer = any(char.isdigit() for char in question) or '/' in question

                        if is_correct:
                            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É –∏–ª–∏ –∫ –±–æ—Å—Å—É
                            response = f"‚úÖ –í–µ—Ä–Ω–æ! "
                            st.session_state.main_theory_step += 1

                            if st.session_state.main_theory_step < len(main_theory['examples']):
                                # –ï—Å—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä—ã
                                next_example = main_theory['examples'][st.session_state.main_theory_step]
                                response += f"\n\n{next_example['explanation']}\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {next_example['question']}"
                            else:
                                # –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–æ—Å—Å—É
                                correct_quiz = sum(st.session_state.quiz_results)
                                variant_index = 0 if correct_quiz == len(topic['quiz']) else 1
                                st.session_state.boss_variant = variant_index
                                st.session_state.boss_step = 0
                                st.session_state.learning_stage = "boss"

                                variant = topic['boss']['variants'][variant_index]
                                response += f"\n\n{topic['boss']['intro']}\n\n**{variant['success_message']}**\n\n**–ó–∞–¥–∞—á–∞:** {variant['tasks'][0]['question']}"
                        elif not is_correct and looks_like_answer:
                            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                            hint_prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:
{current_example['explanation']}

–ó–∞–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫—É: {current_example['question']}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_example['answer']}
–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {question}

–ó–∞–¥–∞—á–∞:
1. –ú—è–≥–∫–æ —Å–∫–∞–∂–∏, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –î–∞–π –Ω–∞–≤–æ–¥—è—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É - –ù–ï —Ä–µ—à–∞–π –∑–∞–¥–∞—á—É –ø–æ–ª–Ω–æ—Å—Ç—å—é! (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ù–∞–ø–æ–º–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

–í–∞–∂–Ω–æ: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)!
–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞. –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º!"""

                            try:
                                result = agent_executor.invoke({
                                    "input": hint_prompt,
                                    "chat_history": ""
                                })
                                response = result['output']
                            except Exception as e:
                                print(f"Agent error: {e}")
                                response = f"ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ!\n\n–í—Å–ø–æ–º–Ω–∏, –∫–∞–∫ –º—ã —Ä–µ—à–∞–ª–∏ –ø–æ—Ö–æ–∂—É—é –∑–∞–¥–∞—á—É –≤ –ø—Ä–∏–º–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑: {current_example['question']}"
                        else:
                            # –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–æ—Ä–∏–∏ - –æ—Ç–≤–µ—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∑–∞–¥–∞–Ω–∏—é
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                            question_prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:
{current_example['explanation']}

–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫—É: {current_example['question']}

–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {question}

–ó–∞–¥–∞—á–∞:
1. –î–∞–π –ö–†–ê–¢–ö–ò–ô –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–∏ —É—á–µ–Ω–∏–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é: –Ω–∞–ø–æ–º–Ω–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ({current_example['question']}) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–∏—Ç—å –µ–≥–æ

–í–∞–∂–Ω–æ:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–º!
- –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è: "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å: {current_example['question']}"
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""

                            try:
                                result = agent_executor.invoke({
                                    "input": question_prompt,
                                    "chat_history": ""
                                })
                                response = result['output']
                            except Exception as e:
                                print(f"Agent error: {e}")
                                response = f"–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! üòä –ù–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∞ –ø–æ—Ç–æ–º —è –ø–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–≤–µ—á—É.\n\n**–ó–∞–¥–∞–Ω–∏–µ:** {current_example['question']}"
                    else:
                        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å—Ä–∞–∑—É –∫ –±–æ—Å—Å—É
                        correct_quiz = sum(st.session_state.quiz_results)
                        variant_index = 0 if correct_quiz == len(topic['quiz']) else 1
                        st.session_state.boss_variant = variant_index
                        st.session_state.boss_step = 0
                        st.session_state.learning_stage = "boss"

                        variant = topic['boss']['variants'][variant_index]
                        response = f"{topic['boss']['intro']}\n\n**{variant['success_message']}**\n\n**–ó–∞–¥–∞—á–∞:** {variant['tasks'][0]['question']}"

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})

                elif stage == "boss":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Å—Å–∞
                    variant = topic['boss']['variants'][st.session_state.boss_variant]
                    current_boss_step = st.session_state.boss_step

                    if current_boss_step >= len(variant['tasks']):
                        # –ë–æ—Å—Å –ø—Ä–æ–π–¥–µ–Ω
                        response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã!\n\n---\n\n{topic['final_summary']}"
                        st.session_state.learning_stage = "finish"
                    else:
                        task = variant['tasks'][current_boss_step]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
                        is_correct = check_answer_with_llm(
                            question,
                            task['answer'],
                            model_choice,
                            yandex_api_key,
                            gemini_api_key,
                            question_context=task['question']
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥—Ä–æ–±—å)
                        looks_like_answer = any(char.isdigit() for char in question) or '/' in question

                        if is_correct:
                            response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                            st.session_state.boss_step += 1

                            if st.session_state.boss_step < len(variant['tasks']):
                                next_task = variant['tasks'][st.session_state.boss_step]
                                response += f"**–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:** {next_task['question']}"
                            else:
                                response += f"üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã!\n\n---\n\n{topic['final_summary']}"
                                st.session_state.learning_stage = "finish"
                        elif not is_correct and looks_like_answer:
                            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ–π –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–∏–∏
                            main_theory = topic['main_theory']
                            theory_context = ""
                            if isinstance(main_theory, dict) and 'examples' in main_theory:
                                for ex in main_theory['examples']:
                                    theory_context += f"{ex['explanation']}\n\n"

                            hint_prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π.

–£—á–µ–Ω–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–±–æ—Å—Å–∞) –ø–æ —Ç–µ–º–µ "{topic['title']}".

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑—É—á–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–∏–∏:
{theory_context}

–ó–∞–¥–∞–Ω–∏–µ: {task['question']}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}
–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {question}

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≤ —á–µ–º –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞
2. –ú—è–≥–∫–æ —Å–∫–∞–∂–∏, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
3. –î–∞–π –Ω–∞–≤–æ–¥—è—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ö–û–ù–ö–†–ï–¢–ù–£–Æ –æ—à–∏–±–∫—É - –ù–ï —Ä–µ—à–∞–π –∑–∞–¥–∞—á—É –ø–æ–ª–Ω–æ—Å—Ç—å—é! (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ü–æ–¥–±–æ–¥—Ä–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

–í–∞–∂–Ω–æ:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–º–∞–∫—Å–∏–º—É–º 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)!
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–µ —É—á–µ–Ω–∏–∫–∞
- –ü–æ–º–Ω–∏: "–ù–æ —è —Ç—É—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!"
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""

                            try:
                                result = agent_executor.invoke({
                                    "input": hint_prompt,
                                    "chat_history": ""
                                })
                                response = result['output']
                            except Exception as e:
                                print(f"Agent error: {e}")
                                response = f"ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–∞–≤–∞–π –≤—Å–ø–æ–º–Ω–∏–º, –∫–∞–∫ –º—ã —Ä–µ—à–∞–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑: {task['question']}"
                        else:
                            # –≠—Ç–æ –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∑–∞–¥–∞–Ω–∏—é
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)

                            main_theory = topic['main_theory']
                            theory_context = ""
                            if isinstance(main_theory, dict) and 'examples' in main_theory:
                                for ex in main_theory['examples']:
                                    theory_context += f"{ex['explanation']}\n\n"

                            question_prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑—É—á–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–∏–∏:
{theory_context}

–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–æ—Å—Å): {task['question']}

–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {question}

–ó–∞–¥–∞—á–∞:
1. –î–∞–π –ö–†–ê–¢–ö–ò–ô –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–∏ —É—á–µ–Ω–∏–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é: –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–∏—Ç—å

–í–∞–∂–Ω–æ:
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–º!
- –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π: "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å: {task['question']}"
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""

                            try:
                                result = agent_executor.invoke({
                                    "input": question_prompt,
                                    "chat_history": ""
                                })
                                response = result['output']
                            except Exception as e:
                                print(f"Agent error: {e}")
                                response = f"–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! üòä –ù–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏–º –∑–∞–¥–∞–Ω–∏–µ.\n\n**–ó–∞–¥–∞—á–∞:** {task['question']}"

                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})

                elif stage == "finish":
                    response = "–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–º—É! üéâ\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ç–µ–º—É —Å–ª–µ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–π!"
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})

# –í—Å—Ç–∞–≤–ª—è–µ–º CSS, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ä–º—É–ª
st.markdown(
    """
    <style>
    .stMarkdown .katex {
        font-size: 1.5em !important;
    }
    </style>
    """,
    unsafe_allow_html=True,
)