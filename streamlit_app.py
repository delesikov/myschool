import streamlit as st
import os
import sympy
from langchain_openai import ChatOpenAI
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain.tools import Tool
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(page_title="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AI", page_icon="üßÆ", layout="wide")

# ============= –ë–ê–ó–ê –î–õ–Ø –†–ï–ñ–ò–ú–ê "–ò–ó–£–ß–ò–¢–¨ –¢–ï–ú–£" =============

LEARNING_TOPICS = {
    "topic1": {
        "title": "‚ûï –°–ª–æ–∂–µ–Ω–∏–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã—Ö –¥—Ä–æ–±–µ–π",
        "description": "–ù–∞—É—á–∏–º—Å—è —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥—Ä–æ–±–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è–º–∏",
        
        # –≠–¢–ê–ü 1: –ö–≤–∏–∑-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        "quiz": [
            {
                "question": "–ß–µ–º—É —Ä–∞–≤–µ–Ω –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —É –¥—Ä–æ–±–∏ 2/3?",
                "options": ["3", "2", "5", "–ù–µ –∑–Ω–∞—é"],
                "correct": "3",
                "explanation_template": "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏ ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ –ø–æ–¥ —á–µ—Ä—Ç–æ–π. –£ –¥—Ä–æ–±–∏ 2/3 –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω 3."
            },
            {
                "question": "–ú–æ–∂–µ—à—å —Å–ª–æ–∂–∏—Ç—å? 1/7 + 2/7 = ?",
                "options": ["3/14", "7/3", "3/7", "–ù–µ –º–æ–≥—É"],
                "correct": "3/7",
                "explanation_template": "–ö–æ–≥–¥–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª–∏: 1/7 + 2/7 = (1+2)/7 = 3/7"
            },
            {
                "question": "–ù–∞–π–¥–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ –ù–û–ö(12, 15) = ?",
                "options": ["60", "27", "180", "3"],
                "correct": "60",
                "explanation_template": "–ù–û–ö(12, 15) = 60. –≠—Ç–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –∏ –Ω–∞ 12, –∏ –Ω–∞ 15."
            }
        ],
        
        # –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        "prerequisite_notes": {
            "–ù–û–ö": """**–ù–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ (–ù–û–ö)**

–ù–û–ö –¥–≤—É—Ö —á–∏—Å–µ–ª ‚Äî —ç—Ç–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö.

**–ö–∞–∫ –Ω–∞–π—Ç–∏ –ù–û–ö(12, 15):**

1. –†–∞–∑–ª–æ–∂–∏–º —á–∏—Å–ª–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏:
   - 12 = 2¬∑2¬∑3
   - 15 = 3¬∑5

2. –ú–Ω–æ–∂–∏—Ç–µ–ª—å 3 –µ—Å—Ç—å –∏ —Ç–∞–º, –∏ —Ç–∞–º, –≤–æ–∑—å–º–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
3. –í—Å–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å: –ù–û–ö(12,15) = 2¬∑2¬∑3¬∑5 = 60

**–ó–∞–ø–æ–º–Ω–∏:** –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ–¥ –¥—Ä–æ–±–Ω–æ–π —á–µ—Ä—Ç–æ–π. –ê –Ω–∞–¥ –Ω–µ–π ‚Äî —á–∏—Å–ª–∏—Ç–µ–ª—å.""",
            
            "–¥—Ä–æ–±–∏": """**–ß—Ç–æ —Ç–∞–∫–æ–µ –¥—Ä–æ–±—å?**

–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–∞–ø–æ–º–Ω—é: –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ–¥ –¥—Ä–æ–±–Ω–æ–π —á–µ—Ä—Ç–æ–π. –ê –Ω–∞–¥ –Ω–µ–π ‚Äî —á–∏—Å–ª–∏—Ç–µ–ª—å."""
        },
        
        # –≠–¢–ê–ü 2: –í–≤–æ–¥–Ω–∞—è —Ç–µ–æ—Ä–∏—è
        "intro_theory": """**–î–∞–≤–∞–π —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ –∫–∞–∫ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥—Ä–æ–±–∏.**

**–ü–æ–Ω—è—Ç–∏–µ –¥—Ä–æ–±–∏:**

–î–∞–≤–∞–π —Å–ª–æ–∂–∏–º 1/7 –∏ 2/7. –°–ª–æ–∂–∏ —á–∏—Å–ª–∏—Ç–µ–ª–∏, –∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤—å –æ–±—â–∏–º:

**1/7 + 2/7 = (1+2)/7 = 3/7**

–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ!

---

**–ê —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º:** –°–º–æ–∂–µ—à—å —Å–ª–æ–∂–∏—Ç—å —Ç–∞–∫ –∂–µ 2/9 + 5/9 = ?""",
        
        # –≠–¢–ê–ü 3: –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–æ—Ä–∏—è  
        "main_theory": """**–°–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—â–∏–º –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º**

–î–∞–≤–∞–π –º—ã –≤–º–µ—Å—Ç–µ —Å–ª–æ–∂–∏–º 1/7 –∏ 2/7. –°–ª–æ–∂–∏ —á–∏—Å–ª–∏—Ç–µ–ª–∏, –∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤—å –æ–±—â–∏–º.

**1/7 + 2/7 = (1+2)/7 = 3/7**

---

**–°–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è–º–∏**

–ï—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä–æ–±–∏ –∫ –æ–±—â–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é!

**–ù–∞–ø—Ä–∏–º–µ—Ä: 1/7 + 2/5**

–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —É —ç—Ç–∏—Ö –¥—Ä–æ–±–µ–π 9. 
–°–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ–º 7.

**–û—Ç–≤–µ—Ç: 7/9** ‚úÖ

---

–¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥—Ä–æ–±–∏! –ù–æ —á—Ç–æ–±—ã —Ç–µ–±–µ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞, —É–¥–æ–±–Ω–µ–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –¥—Ä–æ–±–∏ –∫ **–Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –æ–±—â–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é**.

–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–∂–∏–º 9/22 –∏ 7/33. –û—á–µ–Ω—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è —É–º–Ω–æ–∂–∞—Ç—å 9 –Ω–∞ 33. –ù–∞–π–¥–µ–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π:

**–ù–û–ö(22,33) = 66**

–û–±—â–∏–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å 66. –ó–Ω–∞—á–∏—Ç –ø–µ—Ä–≤—É—é –¥—Ä–æ–±—å –Ω–∞–¥–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 3, –∞ –≤—Ç–æ—Ä—É—é ‚Äî –Ω–∞ 2:

**9/22 + 7/33 = 27/66 + 14/66 = 41/66**""",
        
        # –≠–¢–ê–ü 4: –ë–æ—Å—Å
        "boss": {
            "intro": "–ú—ã –ø–æ—á—Ç–∏ —É —Ñ–∏–Ω–∏—à–∞! –†–µ—à–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:",
            "variants": [
                {
                    "variant": 1,
                    "tasks": [
                        {
                            "question": "5/9 + 1/6",
                            "answer": "13/18",
                            "hint": "–ù–û–ö(9, 6) = 18. –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä–æ–±–∏ –∫ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é 18"
                        }
                    ],
                    "success_message": "–ï—Å–ª–∏ –≤—Å—ë –¥–æ —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–∞–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ ‚úÖ"
                },
                {
                    "variant": 2,
                    "tasks": [
                        {
                            "question": "5/9 + 1/6",
                            "answer": "13/18",
                            "hint": "–ù–û–ö(9, 6) = 18"
                        },
                        {
                            "question": "–ù–û–ö(6, 9) = ?",
                            "answer": "18",
                            "hint": "–ù–∞–π–¥–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –æ–±—â–µ–µ –∫—Ä–∞—Ç–Ω–æ–µ"
                        }
                    ],
                    "success_message": "–ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ ‚ö†Ô∏è"
                }
            ]
        },
        
        # –≠–¢–ê–ü 5: –§–∏–Ω–∏—à
        "final_summary": """**üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥—Ä–æ–±–∏!**

**–î–µ—Ä–∂–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç:**

‚úÖ **–ù–∞–π–¥–∏ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π**
‚úÖ **–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä–æ–±–∏ –∫ –æ–±—â–µ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—é**  
‚úÖ **–°–ª–æ–∂–∏ —á–∏—Å–ª–∏—Ç–µ–ª–∏, –ø–µ—Ä–µ–ø–∏—à–∏ –æ–±—â–∏–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å**

---

–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Å–ª–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π? –ò–ª–∏ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É!

**–í–∞—Ä–∏–∞–Ω—Ç—ã:**
- –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —É–º–Ω–æ–∂–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π
- –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥—Ä–æ–±–∏"""
    }
}

# ============= –ë–ê–ó–ê –ó–ê–î–ê–ß –î–õ–Ø –ü–û–®–ê–ì–û–í–û–ì–û –†–ï–®–ï–ù–ò–Ø =============

DEFAULT_TASKS = {
    "task1": {
        "title": "üçé –ó–∞–¥–∞—á–∞ –ø—Ä–æ —è–±–ª–æ–∫–∏",
        "description": "–£ –ú–∞—à–∏ –±—ã–ª–æ 15 —è–±–ª–æ–∫. –û–Ω–∞ –æ—Ç–¥–∞–ª–∞ 7 —è–±–ª–æ–∫ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å —É –ú–∞—à–∏?",
        "solution_steps": [
            {
                "step": 1,
                "hint": "–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º: —Å–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –±—ã–ª–æ —É –ú–∞—à–∏ –≤ –Ω–∞—á–∞–ª–µ?",
                "answer": "15",
                "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£ –ú–∞—à–∏ –±—ã–ª–æ 15 —è–±–ª–æ–∫."
            },
            {
                "step": 2,
                "hint": "–•–æ—Ä–æ—à–æ! –ê —Å–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ–Ω–∞ –æ—Ç–¥–∞–ª–∞ –¥—Ä—É–≥—É?",
                "answer": "7",
                "explanation": "–í–µ—Ä–Ω–æ! –û–Ω–∞ –æ—Ç–¥–∞–ª–∞ 7 —è–±–ª–æ–∫."
            },
            {
                "step": 3,
                "hint": "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏: –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –°–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ?",
                "answer": ["–≤—ã—á–∏—Ç–∞–Ω–∏–µ", "–≤—ã—á–µ—Å—Ç—å", "–º–∏–Ω—É—Å", "-"],
                "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù—É–∂–Ω–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è–±–ª–æ–∫ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ."
            },
            {
                "step": 4,
                "hint": "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å —Ä–µ—à–∏: 15 - 7 = ?",
                "answer": "8",
                "explanation": "üéâ –ú–æ–ª–æ–¥–µ—Ü! 15 - 7 = 8. –£ –ú–∞—à–∏ –æ—Å—Ç–∞–ª–æ—Å—å 8 —è–±–ª–æ–∫!"
            }
        ],
        "final_answer": "8 —è–±–ª–æ–∫"
    },
    "task2": {
        "title": "üìê –ó–∞–¥–∞—á–∞ –ø—Ä–æ –ø–µ—Ä–∏–º–µ—Ç—Ä",
        "description": "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 8 —Å–º –∏ —à–∏—Ä–∏–Ω—É 5 —Å–º. –ù–∞–π–¥–∏ –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.",
        "solution_steps": [
            {
                "step": 1,
                "hint": "–°–Ω–∞—á–∞–ª–∞ –≤—Å–ø–æ–º–Ω–∏–º: –∫–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞?",
                "answer": ["2*(a+b)", "2(a+b)", "(a+b)*2", "2a+2b"],
                "explanation": "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–∏–º–µ—Ç—Ä: P = 2√ó(–¥–ª–∏–Ω–∞ + —à–∏—Ä–∏–Ω–∞)"
            },
            {
                "step": 2,
                "hint": "–ö–∞–∫–∞—è –¥–ª–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞?",
                "answer": "8",
                "explanation": "–í–µ—Ä–Ω–æ! –î–ª–∏–Ω–∞ = 8 —Å–º"
            },
            {
                "step": 3,
                "hint": "–ê –∫–∞–∫–∞—è —à–∏—Ä–∏–Ω–∞?",
                "answer": "5",
                "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –®–∏—Ä–∏–Ω–∞ = 5 —Å–º"
            },
            {
                "step": 4,
                "hint": "–ü–æ—Å—á–∏—Ç–∞–π: –¥–ª–∏–Ω–∞ + —à–∏—Ä–∏–Ω–∞ = ?",
                "answer": "13",
                "explanation": "–•–æ—Ä–æ—à–æ! 8 + 5 = 13"
            },
            {
                "step": 5,
                "hint": "–¢–µ–ø–µ—Ä—å —É–º–Ω–æ–∂—å –Ω–∞ 2: 13 √ó 2 = ?",
                "answer": "26",
                "explanation": "üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–∏–º–µ—Ç—Ä = 26 —Å–º!"
            }
        ],
        "final_answer": "26 —Å–º"
    }
}

if "tasks_database" not in st.session_state:
    st.session_state.tasks_database = DEFAULT_TASKS.copy()

# ============= –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =============

def calculator(expression: str) -> str:
    try:
        import math
        result = eval(expression.strip(), {
            "__builtins__": {},
            "pi": math.pi,
            "e": math.e,
            "sqrt": math.sqrt,
            "pow": pow,
            "abs": abs
        })
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def symbolic_math(expression: str) -> str:
    try:
        x, y, z = sympy.symbols('x y z')
        local_dict = {
            'x': x, 'y': y, 'z': z, 'integrate': sympy.integrate, 'diff': sympy.diff,
            'solve': sympy.solve, 'limit': sympy.limit, 'sin': sympy.sin, 'cos': sympy.cos,
            'sqrt': sympy.sqrt, 'pi': sympy.pi, 'oo': sympy.oo
        }
        result = eval(expression.strip(), {"__builtins__": {}}, local_dict)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def equation_solver(equation: str) -> str:
    try:
        x = sympy.symbols('x')
        equations = [eq.strip() for eq in equation.split(',')]
        sympy_eqs = []
        for eq in equations:
            if '=' in eq:
                left, right = eq.split('=')
                sympy_eqs.append(sympy.sympify(left) - sympy.sympify(right))
            else:
                sympy_eqs.append(sympy.sympify(eq))
        solutions = sympy.solve(sympy_eqs[0], x)
        return f"–†–µ—à–µ–Ω–∏–µ: {solutions}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ì–ï–ù–¢–ê =============

@st.cache_resource
def init_bot(model_choice, yandex_key, gemini_key):
    tools = [
        Tool(name="Calculator", func=calculator, description="–ß–∏—Å–ª–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"),
        Tool(name="SymbolicMath", func=symbolic_math, description="–°–∏–º–≤–æ–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
        Tool(name="EquationSolver", func=equation_solver, description="–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
    ]
    
    template = """–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π.

–ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –æ—Ç–≤–µ—á–∞–π –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
2. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π
3. –•–≤–∞–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tool_names}
{tools}

–§–æ—Ä–º–∞—Ç –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:
Thought: –Ω—É–∂–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
Action: (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)
Action Input: (–¥–∞–Ω–Ω—ã–µ)
Observation: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
Final Answer: (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)

–§–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è:
Thought: –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
Final Answer: (–æ—Ç–≤–µ—Ç)

–ò—Å—Ç–æ—Ä–∏—è: {chat_history}
–í–æ–ø—Ä–æ—Å: {input}
{agent_scratchpad}"""
    
    prompt = PromptTemplate(
        template=template,
        input_variables=["input", "chat_history", "agent_scratchpad"],
        partial_variables={
            "tools": "\n".join([f"{t.name}: {t.description}" for t in tools]),
            "tool_names": ", ".join([t.name for t in tools])
        }
    )
    
    if model_choice == "YandexGPT 5.1 Pro":
        llm = ChatOpenAI(api_key=yandex_key, base_url="http://localhost:8520/v1",
                        model="yandexgpt/latest", temperature=0.3)
    else:
        llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", google_api_key=gemini_key,
                                    temperature=0.3, convert_system_message_to_human=True)
    
    agent = create_react_agent(llm=llm, tools=tools, prompt=prompt)
    return AgentExecutor(agent=agent, tools=tools, verbose=False, 
                        max_iterations=7, handle_parsing_errors=True)

# ============= –§–£–ù–ö–¶–ò–ò =============

def check_answer(user_answer: str, correct_answer) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user_answer = user_answer.strip().lower().replace(" ", "")
    if isinstance(correct_answer, list):
        return any(ans.lower().replace(" ", "") in user_answer for ans in correct_answer)
    else:
        correct_answer = str(correct_answer).strip().lower().replace(" ", "")
        return correct_answer in user_answer or user_answer in correct_answer

def check_answer_with_llm(user_answer: str, correct_answer, model_choice, yandex_key, gemini_key, question_context: str = "") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if check_answer(user_answer, correct_answer):
        return True
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if isinstance(correct_answer, list):
            correct_answers_str = " –∏–ª–∏ ".join([f"'{ans}'" for ans in correct_answer])
        else:
            correct_answers_str = f"'{correct_answer}'"
        
        prompt = f"""–¢—ã –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {question_context}

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answers_str}
–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: "{user_answer}"

–ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å —É—á—ë—Ç–æ–º:
- –ß–∏—Å–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞–º–∏ (–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å = 15, —Å–µ–º—å = 7)
- –°–∏–Ω–æ–Ω–∏–º—ã (–≤—ã—á–∏—Ç–∞–Ω–∏–µ = –º–∏–Ω—É—Å = –æ—Ç–Ω—è—Ç—å)
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (2+3 = 5, 10-2 = 8)
- –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏ –¥—Ä–æ–±–µ–π (1/2 = 0.5)

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–î–ê" –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, "–ù–ï–¢" –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π."""

        if model_choice == "YandexGPT 5.1 Pro":
            llm = ChatOpenAI(api_key=yandex_key, base_url="http://localhost:8520/v1",
                            model="yandexgpt/latest", temperature=0)
        else:
            llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", google_api_key=gemini_key,
                                        temperature=0, convert_system_message_to_human=True)
        
        response = llm.invoke(prompt)
        result = response.content.strip().upper()
        
        return "–î–ê" in result or "YES" in result
    
    except Exception as e:
        print(f"LLM check failed: {e}")
        # –ï—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        return False

def show_solution_schema(task_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ö–µ–º—É —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    with st.expander("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–µ–º—É —Ä–µ—à–µ–Ω–∏—è", expanded=False):
        st.markdown(f"**–ó–∞–¥–∞—á–∞:** {task_data['description']}")
        st.markdown("---")
        for step in task_data['solution_steps']:
            st.markdown(f"**–®–∞–≥ {step['step']}:**")
            st.markdown(f"- –í–æ–ø—Ä–æ—Å: {step['hint']}")
            answer_text = step['answer'] if isinstance(step['answer'], str) else f"{step['answer'][0]} (–∏–ª–∏ {', '.join(step['answer'][1:])})"
            st.markdown(f"- –û—Ç–≤–µ—Ç: `{answer_text}`")
            st.markdown(f"- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {step['explanation']}")
            st.markdown("")
        st.success(f"**–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç:** {task_data['final_answer']}")

def show_learning_schema(topic_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ö–µ–º—É —Ç–µ–º—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
    with st.expander("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–µ–º—É —Ç–µ–º—ã", expanded=False):
        st.markdown(f"**–¢–µ–º–∞:** {topic_data['title']}")
        st.markdown("---")
        
        st.markdown("### 1Ô∏è‚É£ –ö–≤–∏–∑-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        for i, q in enumerate(topic_data['quiz'], 1):
            st.markdown(f"**–í–æ–ø—Ä–æ—Å {i}:** {q['question']}")
            st.markdown(f"- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{q['correct']}`")
        
        st.markdown("---")
        st.markdown("### 2Ô∏è‚É£ –í–≤–æ–¥–Ω–∞—è —Ç–µ–æ—Ä–∏—è")
        st.info(topic_data['intro_theory'][:200] + "...")
        
        st.markdown("---")
        st.markdown("### 3Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–æ—Ä–∏—è")
        st.info(topic_data['main_theory'][:200] + "...")
        
        st.markdown("---")
        st.markdown("### 4Ô∏è‚É£ –ë–æ—Å—Å (–ø—Ä–æ–≤–µ—Ä–∫–∞)")
        st.markdown("2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–¥–∞—á")
        
        st.markdown("---")
        st.markdown("### 5Ô∏è‚É£ –§–∏–Ω–∏—à")
        st.success("–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç")

# ============= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø =============

if "mode" not in st.session_state:
    st.session_state.mode = "free"
if "messages" not in st.session_state:
    st.session_state.messages = []

# –î–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
if "current_task" not in st.session_state:
    st.session_state.current_task = None
if "current_step" not in st.session_state:
    st.session_state.current_step = 0

# –î–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
if "current_topic" not in st.session_state:
    st.session_state.current_topic = None
if "learning_stage" not in st.session_state:
    st.session_state.learning_stage = "quiz"
if "quiz_results" not in st.session_state:
    st.session_state.quiz_results = []
if "boss_variant" not in st.session_state:
    st.session_state.boss_variant = None
if "boss_step" not in st.session_state:
    st.session_state.boss_step = 0
if "waiting_for_quiz_answer" not in st.session_state:
    st.session_state.waiting_for_quiz_answer = False

# ============= UI =============

st.title("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AI")
st.markdown("*–ü–æ–º–æ–≥–∞—é —É—á–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É!*")
st.markdown("---")

# ============= SIDEBAR =============

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode = st.radio(
        "üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        ["free", "stepbystep", "learn"],
        format_func=lambda x: {
            "free": "üìù –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥",
            "stepbystep": "üë£ –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "learn": "üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–º—É"
        }[x],
        key="mode_selector"
    )
    
    if mode != st.session_state.mode:
        st.session_state.mode = mode
        st.session_state.messages = []
        st.session_state.current_task = None
        st.session_state.current_step = 0
        st.session_state.current_topic = None
        st.session_state.learning_stage = "quiz"
        st.session_state.quiz_results = []
        st.session_state.boss_variant = None
        st.session_state.boss_step = 0
        st.session_state.waiting_for_quiz_answer = False
    
    st.markdown("---")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_choice = st.selectbox("ü§ñ AI –ú–æ–¥–µ–ª—å", ["Google Gemini 2.5 Flash", "YandexGPT 5.1 Pro"])
    
    if model_choice == "YandexGPT 5.1 Pro":
        yandex_api_key = st.text_input("API –∫–ª—é—á", value=os.getenv("YANDEX_API_KEY", ""), type="password")
        gemini_api_key = ""
    else:
        gemini_api_key = st.text_input("Google API –∫–ª—é—á", value=os.getenv("GOOGLE_API_KEY", ""), type="password")
        yandex_api_key = ""
        st.markdown("[–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á ‚Üí](https://aistudio.google.com/apikey)")
    
    st.markdown("---")
    
    # –†–ï–ñ–ò–ú-–ó–ê–í–ò–°–ò–ú–´–ô –ö–û–ù–¢–ï–ù–¢
    if st.session_state.mode == "free":
        st.header("üìö –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á")
        examples = [
            ("üëã –ü—Ä–∏–≤–µ—Ç!", "–ü—Ä–∏–≤–µ—Ç!"),
            ("üî¢ –í—ã—á–∏—Å–ª–∏ 25 √ó 4", "–í—ã—á–∏—Å–ª–∏ 25 √ó 4"),
            ("üìê –†–µ—à–∏ x¬≤ - 9 = 0", "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 9 = 0"),
        ]
        for label, question in examples:
            if st.button(label, key=f"ex_{label}", use_container_width=True):
                st.session_state.selected_question = question
    
    elif st.session_state.mode == "stepbystep":
        st.header("üìñ –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É")
        for task_id, task_data in st.session_state.tasks_database.items():
            if st.button(task_data["title"], key=f"task_{task_id}", use_container_width=True):
                st.session_state.current_task = task_id
                st.session_state.current_step = 0
                st.session_state.messages = [{
                    "role": "assistant",
                    "content": f"**{task_data['title']}**\n\n{task_data['description']}\n\n" +
                              f"–î–∞–≤–∞–π —Ä–µ—à–∏–º –≤–º–µ—Å—Ç–µ! üòä\n\n**–®–∞–≥ 1:** {task_data['solution_steps'][0]['hint']}"
                }]
                st.rerun()
    
    else:  # learn —Ä–µ–∂–∏–º
        st.header("üìö –í—ã–±–µ—Ä–∏ —Ç–µ–º—É")
        for topic_id, topic_data in LEARNING_TOPICS.items():
            if st.button(topic_data["title"], key=f"topic_{topic_id}", use_container_width=True):
                st.session_state.current_topic = topic_id
                st.session_state.learning_stage = "quiz"
                st.session_state.quiz_results = []
                st.session_state.boss_variant = None
                st.session_state.boss_step = 0
                st.session_state.waiting_for_quiz_answer = True
                
                # –°—Ç–∞—Ä—Ç—É–µ–º —Å –∫–≤–∏–∑–∞
                quiz = topic_data['quiz'][0]
                st.session_state.messages = [{
                    "role": "assistant",
                    "content": f"**{topic_data['title']}**\n\n{topic_data['description']}\n\n" +
                              f"–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å! üéØ\n\n**–í–æ–ø—Ä–æ—Å 1:** {quiz['question']}",
                    "quiz_options": quiz['options']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                }]
                st.rerun()
    
    st.markdown("---")
    
    if st.button("üóëÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
        st.session_state.messages = []
        st.session_state.current_task = None
        st.session_state.current_step = 0
        st.session_state.current_topic = None
        st.session_state.learning_stage = "quiz"
        st.session_state.quiz_results = []
        st.session_state.boss_variant = None
        st.session_state.boss_step = 0
        st.session_state.waiting_for_quiz_answer = False
        st.rerun()

# ============= –ü–†–û–í–ï–†–ö–ê API =============

current_key = yandex_api_key if model_choice == "YandexGPT 5.1 Pro" else gemini_api_key

if not current_key:
    st.warning(f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞")
    st.info("üí° –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á Gemini")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
if st.session_state.mode == "free":
    try:
        agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        st.stop()

# ============= –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° =============

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
mode_badges = {
    "free": "üìù –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥",
    "stepbystep": "üë£ –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
    "learn": "üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–º—É"
}
st.info(f"**–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:** {mode_badges[st.session_state.mode]}")

# –°–•–ï–ú–´
if st.session_state.mode == "stepbystep" and st.session_state.current_task:
    task_data = st.session_state.tasks_database[st.session_state.current_task]
    show_solution_schema(task_data)

if st.session_state.mode == "learn" and st.session_state.current_topic:
    topic_data = LEARNING_TOPICS[st.session_state.current_topic]
    show_learning_schema(topic_data)

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
for idx, message in enumerate(st.session_state.messages):
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞ –∏ –æ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        if (message["role"] == "assistant" and 
            "quiz_options" in message and 
            idx == len(st.session_state.messages) - 1 and
            st.session_state.waiting_for_quiz_answer):
            
            st.markdown("**–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç:**")
            cols = st.columns(2)
            for i, option in enumerate(message["quiz_options"]):
                col_idx = i % 2
                with cols[col_idx]:
                    if st.button(f"{option}", key=f"quiz_opt_{idx}_{i}", use_container_width=True):
                        st.session_state.quiz_answer = option
                        st.session_state.waiting_for_quiz_answer = False
                        st.rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫–≤–∏–∑–∞
if "quiz_answer" in st.session_state:
    question = st.session_state.quiz_answer
    del st.session_state.quiz_answer
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": question})
    
    with st.chat_message("assistant"):
        with st.spinner("ü§î –î—É–º–∞—é..."):
            topic = LEARNING_TOPICS[st.session_state.current_topic]
            stage = st.session_state.learning_stage
            
            if stage == "quiz":
                quiz_index = len(st.session_state.quiz_results)
                quiz_q = topic['quiz'][quiz_index]
                is_correct = check_answer_with_llm(
                    question, 
                    quiz_q['correct'],
                    model_choice,
                    yandex_api_key,
                    gemini_api_key,
                    question_context=quiz_q['question']
                )
                st.session_state.quiz_results.append(is_correct)
                
                if is_correct:
                    response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                else:
                    response = f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. {quiz_q['explanation_template']}\n\n"
                
                # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                next_quiz_index = quiz_index + 1
                if next_quiz_index < len(topic['quiz']):
                    next_q = topic['quiz'][next_quiz_index]
                    response += f"**–í–æ–ø—Ä–æ—Å {next_quiz_index + 1}:** {next_q['question']}"
                    st.session_state.waiting_for_quiz_answer = True
                    st.markdown(response)
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": response,
                        "quiz_options": next_q['options']
                    })
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
                    correct_count = sum(st.session_state.quiz_results)
                    if correct_count == len(topic['quiz']):
                        st.session_state.learning_stage = "main_theory"
                        response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['main_theory']}"
                    else:
                        st.session_state.learning_stage = "choice"
                        response += "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏"
                    
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
    
    st.rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
if "selected_question" in st.session_state:
    question = st.session_state.selected_question
    del st.session_state.selected_question
else:
    question = st.chat_input("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç...")

if question:
    st.session_state.messages.append({"role": "user", "content": question})
    with st.chat_message("user"):
        st.markdown(question)
    
    with st.chat_message("assistant"):
        with st.spinner("ü§î –î—É–º–∞—é..."):
            
            if st.session_state.mode == "free":
                # ===== –†–ï–ñ–ò–ú –°–í–û–ë–û–î–ù–û–ì–û –í–í–û–î–ê =====
                try:
                    history = "\n".join([
                        f"User: {m['content']}" if m['role'] == 'user' else f"Assistant: {m['content']}"
                        for m in st.session_state.messages[-6:]
                    ])
                    
                    response = agent_executor.invoke({"input": question, "chat_history": history})
                    answer = response['output']
                    st.markdown(answer)
                    st.session_state.messages.append({"role": "assistant", "content": answer})
                    
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                    st.error(error_msg)
                    st.session_state.messages.append({"role": "assistant", "content": error_msg})
            
            elif st.session_state.mode == "stepbystep":
                # ===== –†–ï–ñ–ò–ú –ü–û–®–ê–ì–û–í–û–ì–û –†–ï–®–ï–ù–ò–Ø =====
                if st.session_state.current_task is None:
                    response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞! üëà"
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                else:
                    task = st.session_state.tasks_database[st.session_state.current_task]
                    current_step_num = st.session_state.current_step
                    
                    if current_step_num >= len(task["solution_steps"]):
                        # –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ - —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥
                        try:
                            history = "\n".join([
                                f"User: {m['content']}" if m['role'] == 'user' else f"Assistant: {m['content']}"
                                for m in st.session_state.messages[-6:]
                            ])
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)
                            response_obj = agent_executor.invoke({"input": question, "chat_history": history})
                            response = response_obj['output']
                            response += "\n\n---\n\nüí° –•–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏ –µ—ë —Å–ª–µ–≤–∞!"
                        except:
                            response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞—á—É!\n\n**–û—Ç–≤–µ—Ç:** {task['final_answer']}\n\n–•–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å –µ—â–µ –æ–¥–Ω—É? –í—ã–±–µ—Ä–∏ —Å–ª–µ–≤–∞!"
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    else:
                        step = task["solution_steps"][current_step_num]
                        
                        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏
                        help_keywords = ["–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "–Ω–µ –∑–Ω–∞—é", "–æ–±—ä—è—Å–Ω–∏", 
                                       "–ø–æ–¥—Å–∫–∞–∑–∫–∞", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–∫–∞–∫ —Ä–µ—à–∏—Ç—å", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"]
                        asking_for_help = any(keyword in question.lower() for keyword in help_keywords)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
                        is_correct = check_answer_with_llm(
                            question, 
                            step["answer"], 
                            model_choice, 
                            yandex_api_key, 
                            gemini_api_key,
                            question_context=step['hint']
                        )
                        
                        if is_correct:
                            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            response = f"‚úÖ {step['explanation']}\n\n"
                            st.session_state.current_step += 1
                            
                            if st.session_state.current_step < len(task["solution_steps"]):
                                next_step = task["solution_steps"][st.session_state.current_step]
                                response += f"**–®–∞–≥ {next_step['step']}:** {next_step['hint']}"
                            else:
                                response += f"üéâ –ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É!\n\n**–û—Ç–≤–µ—Ç:** {task['final_answer']}"
                            
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response})
                        
                        elif asking_for_help:
                            # –£—á–µ–Ω–∏–∫ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â—å
                            response = f"–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É! üòä\n\n**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {step['hint']}\n\n"
                            
                            # –î–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                            answer_str = step["answer"] if isinstance(step["answer"], str) else step["answer"][0]
                            
                            if "—Å–∫–æ–ª—å–∫–æ" in step['hint'].lower() or "–∫–∞–∫–∞—è" in step['hint'].lower() or "–∫–∞–∫–æ–µ" in step['hint'].lower():
                                response += f"–°–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏! üëÄ"
                            else:
                                response += f"–ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å –µ—â—ë —Ä–∞–∑, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è! üí™"
                            
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response})
                        
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
                            answer_str = step["answer"] if isinstance(step["answer"], str) else step["answer"][0]
                            
                            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
                            is_short = len(question.split()) <= 5
                            has_numbers = any(char.isdigit() for char in question)
                            has_math_words = any(word in question.lower() for word in ["–ø–ª—é—Å", "–º–∏–Ω—É—Å", "—É–º–Ω–æ–∂–∏—Ç—å", "—Ä–∞–∑–¥–µ–ª–∏—Ç—å", "—Ä–∞–≤–Ω–æ", "–≤—ã—á–∏—Ç–∞–Ω–∏–µ", "—Å–ª–æ–∂–µ–Ω–∏–µ"])
                            
                            is_attempt = is_short and (has_numbers or has_math_words)
                            
                            if is_attempt:
                                # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å
                                response = f"ü§î –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ!\n\n**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {step['hint']}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–ø–æ–º–æ–≥–∏' üòä"
                                st.markdown(response)
                                st.session_state.messages.append({"role": "assistant", "content": response})
                            else:
                                # –≠—Ç–æ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞
                                try:
                                    history = "\n".join([
                                        f"User: {m['content']}" if m['role'] == 'user' else f"Assistant: {m['content']}"
                                        for m in st.session_state.messages[-6:]
                                    ])
                                    
                                    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                                    context = f"–ú—ã —Ä–µ—à–∞–µ–º –∑–∞–¥–∞—á—É: {task['description']}. –°–µ–π—á–∞—Å –Ω–∞ —à–∞–≥–µ {current_step_num + 1}: {step['hint']}"
                                    
                                    agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)
                                    response_obj = agent_executor.invoke({
                                        "input": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞: {question}\n\n–û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥.", 
                                        "chat_history": history
                                    })
                                    response = response_obj['output']
                                    response += f"\n\n---\n\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞—à –≤–æ–ø—Ä–æ—Å:\n\n**–®–∞–≥ {step['step']}:** {step['hint']}"
                                except Exception as e:
                                    response = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä\n\n–î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É: {step['explanation']}\n\n**–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π:** {step['hint']}"
                                
                                st.markdown(response)
                                st.session_state.messages.append({"role": "assistant", "content": response})
            
            else:  # learn —Ä–µ–∂–∏–º
                # ===== –†–ï–ñ–ò–ú –ò–ó–£–ß–ï–ù–ò–Ø –¢–ï–ú–´ =====
                if st.session_state.current_topic is None:
                    response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞! üëà"
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                else:
                    topic = LEARNING_TOPICS[st.session_state.current_topic]
                    stage = st.session_state.learning_stage
                    
                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    def handle_offtopic_question(question, current_hint):
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            history = "\n".join([
                                f"User: {m['content']}" if m['role'] == 'user' else f"Assistant: {m['content']}"
                                for m in st.session_state.messages[-4:]
                            ])
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)
                            response_obj = agent_executor.invoke({
                                "input": f"–û—Ç–≤–µ—Ç—å –ö–†–ê–¢–ö–û (–º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): {question}", 
                                "chat_history": history
                            })
                            brief_answer = response_obj['output']
                            return f"{brief_answer}\n\n---\n\nüí° –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é!\n\n{current_hint}"
                        except:
                            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä –ù–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∞ –ø–æ—Ç–æ–º —è –æ—Ç–≤–µ—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ!\n\n{current_hint}"
                    
                    if stage == "quiz":
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∏–∑–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏)
                        quiz_index = len(st.session_state.quiz_results)
                        
                        if quiz_index >= len(topic['quiz']):
                            # –ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
                            correct_count = sum(st.session_state.quiz_results)
                            if correct_count == len(topic['quiz']):
                                st.session_state.learning_stage = "main_theory"
                                response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['main_theory']}"
                            else:
                                st.session_state.learning_stage = "choice"
                                response = "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏"
                            st.markdown(response)
                            st.session_state.messages.append({"role": "assistant", "content": response})
                        else:
                            quiz_q = topic['quiz'][quiz_index]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
                            is_quiz_answer = any(opt.lower().replace(" ", "") in question.lower().replace(" ", "") 
                                               for opt in quiz_q['options'])
                            
                            if is_quiz_answer:
                                # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–≤–∏–∑ - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM –ø—Ä–æ–≤–µ—Ä–∫—É
                                is_correct = check_answer_with_llm(
                                    question, 
                                    quiz_q['correct'],
                                    model_choice,
                                    yandex_api_key,
                                    gemini_api_key,
                                    question_context=quiz_q['question']
                                )
                                st.session_state.quiz_results.append(is_correct)
                                
                                if is_correct:
                                    response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                                else:
                                    response = f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. {quiz_q['explanation_template']}\n\n"
                                
                                # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                                next_quiz_index = quiz_index + 1
                                if next_quiz_index < len(topic['quiz']):
                                    next_q = topic['quiz'][next_quiz_index]
                                    response += f"**–í–æ–ø—Ä–æ—Å {next_quiz_index + 1}:** {next_q['question']}"
                                    st.session_state.waiting_for_quiz_answer = True
                                    st.markdown(response)
                                    st.session_state.messages.append({
                                        "role": "assistant", 
                                        "content": response,
                                        "quiz_options": next_q['options']
                                    })
                                else:
                                    # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
                                    correct_count = sum(st.session_state.quiz_results)
                                    if correct_count == len(topic['quiz']):
                                        st.session_state.learning_stage = "main_theory"
                                        response += f"\n\nüéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['main_theory']}"
                                    else:
                                        st.session_state.learning_stage = "choice"
                                        response += "\n\n–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏–º?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏"
                                    st.markdown(response)
                                    st.session_state.messages.append({"role": "assistant", "content": response})
                            else:
                                # –≠—Ç–æ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                                current_hint = f"**–í–æ–ø—Ä–æ—Å {quiz_index + 1}:** {quiz_q['question']}"
                                response = handle_offtopic_question(question, current_hint)
                                st.markdown(response)
                                st.session_state.messages.append({
                                    "role": "assistant", 
                                    "content": response,
                                    "quiz_options": quiz_q['options']
                                })
                                st.session_state.waiting_for_quiz_answer = True
                    
                    elif stage == "choice":
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–≤–∏–∑–∞
                        if "–¥–∞" in question.lower() or "–≤—Å–ø–æ–º–Ω" in question.lower():
                            response = f"üìñ **–ö–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n\n{topic['prerequisite_notes']['–ù–û–ö']}\n\n---\n\n–ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ **'–ü–æ–Ω—è—Ç–Ω–æ'** –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ!"
                            st.session_state.learning_stage = "waiting_after_notes"
                        elif "–Ω–µ—Ç" in question.lower() or "–æ–±—ä—è—Å–Ω" in question.lower():
                            response = f"–•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['intro_theory']}"
                            st.session_state.learning_stage = "intro_theory"
                        else:
                            # –û—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                            response = handle_offtopic_question(question, "–ü–æ–≤—Ç–æ—Ä–∏–º —Ç–µ–º—ã?\n\n- –ù–∞–ø–∏—à–∏ **'–î–∞'** - –ø–æ–∫–∞–∂—É –∫–æ–Ω—Å–ø–µ–∫—Ç\n- –ù–∞–ø–∏—à–∏ **'–ù–µ—Ç'** - —Å—Ä–∞–∑—É –∫ —Ç–µ–æ—Ä–∏–∏")
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    
                    elif stage == "waiting_after_notes":
                        # –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
                        if "–ø–æ–Ω—è—Ç–Ω–æ" in question.lower() or "–≥–æ—Ç–æ–≤" in question.lower() or "–¥–∞" in question.lower():
                            response = f"–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.\n\n---\n\n{topic['intro_theory']}"
                            st.session_state.learning_stage = "intro_theory"
                        else:
                            response = handle_offtopic_question(question, "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ù–∞–ø–∏—à–∏ **'–ü–æ–Ω—è—Ç–Ω–æ'** –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ!")
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    
                    elif stage == "intro_theory":
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤–≤–æ–¥–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM
                        is_correct = check_answer_with_llm(
                            question,
                            "7/9",
                            model_choice,
                            yandex_api_key,
                            gemini_api_key,
                            question_context="–°–ª–æ–∂–∏ 2/9 + 5/9"
                        )
                        
                        if is_correct:
                            response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! 2/9 + 5/9 = 7/9\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏!\n\n---\n\n{topic['main_theory']}"
                            st.session_state.learning_stage = "main_theory"
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                            if any(char.isdigit() for char in question) and "/" in question:
                                # –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å
                                response = "ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª–∏ 2 + 5, –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è 9"
                            else:
                                # –û—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                                response = handle_offtopic_question(question, "**–ê —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º:** –°–º–æ–∂–µ—à—å —Å–ª–æ–∂–∏—Ç—å —Ç–∞–∫ –∂–µ 2/9 + 5/9 = ?")
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    
                    elif stage == "main_theory":
                        # –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–æ—Å—Å—É
                        correct_quiz = sum(st.session_state.quiz_results)
                        variant_index = 0 if correct_quiz == len(topic['quiz']) else 1
                        st.session_state.boss_variant = variant_index
                        st.session_state.boss_step = 0
                        st.session_state.learning_stage = "boss"
                        
                        variant = topic['boss']['variants'][variant_index]
                        response = f"{topic['boss']['intro']}\n\n**{variant['success_message']}**\n\n**–ó–∞–¥–∞—á–∞:** {variant['tasks'][0]['question']}"
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    
                    elif stage == "boss":
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Å—Å–∞
                        variant = topic['boss']['variants'][st.session_state.boss_variant]
                        current_boss_step = st.session_state.boss_step
                        
                        if current_boss_step >= len(variant['tasks']):
                            # –ë–æ—Å—Å –ø—Ä–æ–π–¥–µ–Ω
                            response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã!\n\n---\n\n{topic['final_summary']}"
                            st.session_state.learning_stage = "finish"
                        else:
                            task = variant['tasks'][current_boss_step]
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
                            is_correct = check_answer_with_llm(
                                question,
                                task['answer'],
                                model_choice,
                                yandex_api_key,
                                gemini_api_key,
                                question_context=task['question']
                            )
                            
                            if is_correct:
                                response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç: {task['answer']}\n\n"
                                st.session_state.boss_step += 1
                                
                                if st.session_state.boss_step < len(variant['tasks']):
                                    next_task = variant['tasks'][st.session_state.boss_step]
                                    response += f"**–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:** {next_task['question']}"
                                else:
                                    response += f"üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω—ã!\n\n---\n\n{topic['final_summary']}"
                                    st.session_state.learning_stage = "finish"
                            else:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
                                if any(char.isdigit() for char in question):
                                    # –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å
                                    response = f"ü§î –ù–µ —Å–æ–≤—Å–µ–º. **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {task['hint']}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
                                else:
                                    # –û—Ç–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                                    response = handle_offtopic_question(question, f"**–ó–∞–¥–∞—á–∞:** {task['question']}")
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    
                    elif stage == "finish":
                        # –ù–∞ —Ñ–∏–Ω–∏—à–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
                        try:
                            history = "\n".join([
                                f"User: {m['content']}" if m['role'] == 'user' else f"Assistant: {m['content']}"
                                for m in st.session_state.messages[-6:]
                            ])
                            agent_executor = init_bot(model_choice, yandex_api_key, gemini_api_key)
                            response_obj = agent_executor.invoke({"input": question, "chat_history": history})
                            response = response_obj['output']
                            response += "\n\n---\n\nüí° –•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É? –í—ã–±–µ—Ä–∏ –µ—ë —Å–ª–µ–≤–∞!"
                        except:
                            response = "–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–º—É! üéâ\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ç–µ–º—É —Å–ª–µ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
                        
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})

# Footer
st.markdown("---")
footer_text = {
    "free": "üí° –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã!",
    "stepbystep": "üí° –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –∏ –Ω–∞–∂–º–∏ 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–µ–º—É'!",
    "learn": "üí° –ò–∑—É—á–∞–π —Ç–µ–º—ã –ø–æ —à–∞–≥–∞–º —Å –∫–≤–∏–∑–æ–º –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–π!"
}
st.markdown(footer_text[st.session_state.mode])